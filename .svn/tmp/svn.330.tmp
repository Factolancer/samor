import {Component, OnInit, Inject} from '@angular/core';
import {OrderService} from "../../order/order.service";
import {ActivatedRoute, Params, Router} from "@angular/router";
import {CheckoutService} from "../../core/services/checkout.service";
import {CheckoutFund} from "../models/checkout-fund";
import {PlatformLocation} from "@angular/common";
import {PaymentObject} from "../models/payment-object";
import {IAppConfig, APP_CONFIG} from "../../../environments/environment";
import {Logger} from "../../core/logger/logger";
import {TitleService} from "../../core/services/title.service";

@Component({
    selector: 'app-order-confirmation',
    templateUrl: 'order-confirmation.component.html',
    styleUrls: ['../checkout.styles.scss']
})
export class OrderConfirmationComponent implements OnInit {

    errorFunds: CheckoutFund[] = [];
    allFailed: boolean;
    orderId: string;
    className: string;

    constructor(private checkoutService: CheckoutService, private activatedRoute: ActivatedRoute,
                private router: Router, private platformLocation: PlatformLocation,
                @Inject(APP_CONFIG) private config: IAppConfig, private logger: Logger,
                private titleService: TitleService) {

        this.className = "OrderConfirmationComponent";
        this.allFailed = false;
    }

    ngOnInit() {

        this.titleService.setTitle("order_confirmation");
        this.errorFunds = this.checkoutService.errorCheckoutData;
        let errorFundCount = 0;
        this.errorFunds.forEach(fund => {
            if (fund.orderPlaced == false) {
                errorFundCount += 1;
            }
        });

        if (errorFundCount == this.checkoutService.checkoutData.fundsData.length) {
            this.allFailed = true;
        }

        this.activatedRoute.params.subscribe((params: Params) => {
            this.orderId = params['orderId'];
            this.checkoutService.getOrderStatus(this.orderId).subscribe();
        });
    }

    goToCart() {
        this.router.navigate(['/cart']);
    }

    payNow() {
        let paymentUrl = this.platformLocation['location'].origin + this.config.paymentFallbackUrl;
        this.checkoutService.getPaymentLink(new PaymentObject(+this.orderId, paymentUrl)).subscribe(paymentResponse => {
            let responsePaymentObj = paymentResponse as PaymentObject;
            this.logger.debug(this.className, responsePaymentObj);
            window.location.replace(responsePaymentObj.bseUrl);
        })
    }
}
