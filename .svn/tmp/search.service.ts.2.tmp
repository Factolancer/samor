import {Injectable} from "@angular/core";
import {HttpService} from "../services/http-service.service";
<<<<<<< .mine
import {SearchResults, BankSearchResults} from "./search-results";
import {SearchInput, BankSearchInput} from "./search-input";
import {Subject, Observable} from "rxjs";
=======
import {FundSearchInput} from "./fund-search-input";
import {Observable, BehaviorSubject} from "rxjs";
>>>>>>> .r429


@Injectable()
export class SearchService {
<<<<<<< .mine

    private searchResultsSource = new Subject<SearchResults>();
    searchResults = this.searchResultsSource.asObservable();

    private searchInputSource = new Subject<SearchInput>();
    searchInput = this.searchInputSource.asObservable();

=======
    private fundSearchInputSource = new BehaviorSubject<FundSearchInput>(new FundSearchInput());
    searchInput = this.fundSearchInputSource.asObservable();
    searchResults: Observable<any> = this.searchInput.switchMap(
        (searchInput: FundSearchInput) => {
            return this.httpService.post("/searchFund", searchInput);
        });

>>>>>>> .r429
    constructor(private httpService: HttpService) {
    }

    searchFund(searchInput: FundSearchInput) {
        searchInput.from = 0;
        searchInput.sortElement = "drat";
        searchInput.sortOrder = "desc";
        this.setSearchInput(searchInput)
        this.httpService.post("/searchFund", searchInput).subscribe(output => {
            this.searchResultsSource.next(output as SearchResults);
        });
    }


    sort(searchInput: FundSearchInput) {
        searchInput.from = 0;
        this.setSearchInput(searchInput)
        this.httpService.post("/searchFund", searchInput).subscribe(output => {
            this.searchResultsSource.next(output as SearchResults);
        });
    }

    changePage(searchInput: FundSearchInput) {
<<<<<<< .mine
        this.setSearchInput(searchInput)
        this.httpService.post("/searchFund", searchInput).subscribe(output => {
            this.searchResultsSource.next(output as SearchResults);
        });
    }

=======
        this.setSearchInput(searchInput);
    }

>>>>>>> .r429

    getFilterData(path: string) {
        return this.httpService.get(path);
    }

    setSearchInput(searchInput: FundSearchInput) {
        this.fundSearchInputSource.next(searchInput);
    }

    getSearchInput() {
        return this.fundSearchInputSource.value;
    }


}

@Injectable()
export class BankSearchService {


    private searchResultsSource = new Subject<BankSearchResults>();
    searchResults = this.searchResultsSource.asObservable();

    private searchInputSource = new Subject<BankSearchInput>();
    searchInput = this.searchInputSource.asObservable();

    constructor(private httpService: HttpService) { }

    searchBranch(searchInput: BankSearchInput) {
        this.setSearchInput(searchInput)
        //searchInput = JSON.stringify(searchInput);
        console.log("SearchInput: " + JSON.stringify(searchInput))
        this.httpService.post("/getbanks", searchInput).subscribe(output => {
            console.log(output.banks);
            this.searchResultsSource.next(output as BankSearchResults);
            console.log("Returned from backend");
        });
    }

    setSearchInput(searchInput: BankSearchInput) {
        this.searchInputSource.next(searchInput);
    }

}
