import {Component, OnInit, ViewContainerRef, Inject} from "@angular/core";
import {ActivatedRoute, Router} from "@angular/router";
import {CheckoutService} from "../checkout.service";
import {HttpService} from "../../core/services/http-service.service";
import {InvestmentModeEnum} from "../../enum/investment-mode-enum";
import {CheckoutFund} from "../models/checkout-fund";
import {Checkout} from "../models/checkout";
import {SnackBarService} from "../../core/services/snack-bar.service";
import {disclaimers} from "../../../properties/discalimers";
import html2canvas from "html2canvas";
import {Logger} from "../../core/logger/logger";
import {SummaryUserInfo} from "../models/summary-user-info";
import {OrderSummary} from "../models/order-summary";
import {IAppConfig, APP_CONFIG} from "../../../environments/environment";
import {PaymentObject} from "../models/payment-object";
import {Location, PlatformLocation} from "@angular/common";
import {URLAccessGuard} from "../../core/guards/urlAccess.guard";
import {Http} from "@angular/http";
import {LoginService} from "../../core/services/login.service";

@Component({
    selector: 'app-summary',
    templateUrl: './summary.component.html',
    styleUrls: ['../checkout.styles.scss']
})
export class SummaryComponent implements OnInit {

    checkoutData: Checkout;
    sipFunds: CheckoutFund[];
    lumpsumFunds: CheckoutFund[];
    agreementSelected: boolean;
    disclaimerList: string[];
    sipDisclaimerText: string;
    className: string;
    summaryUserInfo: SummaryUserInfo;

    constructor(private route: ActivatedRoute, private router: Router, private logger: Logger,
                private checkoutService: CheckoutService, private httpService: HttpService, private http: Http,
                private viewContainerRef: ViewContainerRef, private snackBarService: SnackBarService,
                @Inject(APP_CONFIG) private config: IAppConfig, private location: Location,
                private platformLocation: PlatformLocation, private urlAccessGuard: URLAccessGuard) {
        this.agreementSelected = false;
        this.className = "SummaryComponent";
        this.sipDisclaimerText = `${disclaimers.checkout_sip}`;
    }

    ngOnInit() {
        this.sipFunds = [];
        this.lumpsumFunds = [];
        this.checkoutData = this.checkoutService.checkoutData;

        this.route.data.forEach((data: {userInfo: SummaryUserInfo}) => {
            this.summaryUserInfo = data.userInfo;
        });


        this.checkoutData.fundsData.forEach(fund => {
            if (fund.selectedInvestmentMode == InvestmentModeEnum[InvestmentModeEnum.SIP]) {
                this.sipFunds.push(fund);
            } else {
                this.lumpsumFunds.push(fund);
            }
        });
        this.disclaimerList = [`${disclaimers.summary_1}`, `${disclaimers.summary_2}`, `${disclaimers.summary_3}`, `${disclaimers.summary_4}`, `${disclaimers.summary_5}`]

    }

    proceed() {
        if (this.agreementSelected) {
            document.body.scrollTop = 0;


            this.checkoutService.invest().subscribe(orderResponse => {
                let orderSummary = orderResponse  as OrderSummary;
                let errorFound = false;
                let errorFunds: CheckoutFund[] = [];
                this.getSS(orderSummary.orderId);
                orderSummary.subOrderList.forEach(subOrder => {
                    if (subOrder.orderProcessed == 1) {
                        this.checkoutData.fundsData.forEach(fund => {
                            if (fund.selectedSoptRfnum == subOrder.soptrfnum && fund.selectedInvestmentMode == subOrder.investmentMode) {
                                fund.orderPlaced = false;
                            }
                        })
                        errorFound = true;
                    } else {
                        this.checkoutData.fundsData.forEach(fund => {
                            if (fund.selectedSoptRfnum == subOrder.soptrfnum && fund.selectedInvestmentMode == subOrder.investmentMode) {
                                fund.orderPlaced = true;
                            }
                        })
                    }
                });

                if (errorFound) {
                    this.checkoutService.errorCheckoutData = this.checkoutData.fundsData;
                    this.urlAccessGuard.allow = true;
                    this.router.navigate(['confirm', orderSummary.orderId], {relativeTo: this.route.parent});

                } else {
                    this.logger.debug(this.className, this.route);
                    let paymentUrl = this.platformLocation['location'].origin + this.config.paymentFallbackUrl;
                    this.checkoutService.getPaymentLink(new PaymentObject(orderSummary.orderId, paymentUrl)).subscribe(paymentResponse => {
                        let responsePaymentObj = paymentResponse as PaymentObject;
                        this.logger.debug(this.className, responsePaymentObj);
                        window.location.replace(responsePaymentObj.bseUrl);
                    })
                }
            })
        } else {
            this.snackBarService.showSnackBar("Please accept the terms and conditions", "Okay", this.viewContainerRef);
        }
    }

    getSS(orderId: number) {
        html2canvas(document.body, {svgRendering: true}).then(canvas => {
            let base64String = canvas.toDataURL("image/png");
            this.http.post(this.config.snapshotApi, {
                id: orderId,
                type: 'order',
                snapshot: base64String
            }).subscribe(response => {
                console.log(response);
            });
        });

        //formData.append("name", "MySS");
        //formData.append("image", img);
        //console.log(formData);
        // window.open(img);
        //var body = {"name": img};
        /*this.httpService.post('/getSS', body).subscribe(response => {
         console.log(response);
         });*/
        //console.log(canvas);
        //var formData = new FormData();


    }

    back() {
        this.urlAccessGuard.allow = true;
        this.router.navigate(['init'], {relativeTo: this.route.parent});

    }
}