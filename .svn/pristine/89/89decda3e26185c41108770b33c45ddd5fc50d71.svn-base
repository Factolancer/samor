import {Component, OnInit, OnDestroy, ViewContainerRef} from "@angular/core";
import {Params, ActivatedRoute, Router} from "@angular/router";
import {FundSearchResults} from "../explore-funds/fund-search-results";
import {Title} from "@angular/platform-browser";
import {FundSearchInput} from "../explore-funds/fund-search-input";
import {Subscription} from "rxjs/Subscription";
import "rxjs/add/operator/switchMap";
import "rxjs/add/operator/take";
import {ExploreFundsService} from "../core/services/explore-funds.service";
import {CompareService} from "../core/services/compare.service";
import {URLAccessGuard} from "../core/guards/urlAccess.guard";
import {Fund} from "../models/fund";
import {Logger} from "../core/logger/logger";
import {SnackBarService} from "../core/services/snack-bar.service";
import {HeaderService} from "../core/services/header.service";
import {Observable} from "rxjs/Observable";
import {Subject} from "rxjs/Subject";
import {BehaviorSubject} from "rxjs/BehaviorSubject";
import {RedemptionService} from "./redemption.service";
import {FormArray, FormBuilder, FormGroup, Validators} from "@angular/forms";
import {Redemption} from "./models/redemption";
import {RedemptionModeEnum} from "../enum/redemption-mode-enum";
import {RedemptionFund} from "./models/redemption-fund";
import {InvestmentModeEnum} from "../enum/investment-mode-enum";
import {DISABLED} from "@angular/forms/src/model";


@Component({
    selector: 'app-redemption',
    templateUrl: './redemption.component.html',
    styleUrls: ['./redemption.styles.scss']
})
export class RedemptionComponent implements OnInit {

    searchResults: FundSearchResults;
    routeInputSubscription: Subscription;
    showFilterContent: boolean;
    redeemFundList: Fund[];
    showComparisonList: boolean;

    redData: Redemption;
    redemptionFormGroup: FormGroup;
    redemptionFormErrors: any;
    totalRedemptionAmount: number;
    className: string;
    fullRedemption: boolean;
    amountOrUnit: boolean;

    shake: boolean;
    shakeSub: Subscription;

    constructor(private route: ActivatedRoute, private router: Router, private fb: FormBuilder,
                private exploreFundsService: ExploreFundsService, private titleService: Title,
                private redemptionService: RedemptionService, private urlAccessGuard: URLAccessGuard,
                private snackBarService: SnackBarService, private viewContainerRef: ViewContainerRef,
                private logger: Logger, private headerService : HeaderService) {
        this.className = "RedemptionComponent";
        this.fullRedemption = false;
        this.amountOrUnit = false;
    }

    ngOnInit() {
        this.titleService.setTitle("Redeem Funds");
        this.redemptionService.getRedemptionData();
        /*this.redemptionService.getRedemptionData().subscribe(data => {
            this.logger.debug(this.className, data);
            this.redemptionService.redemptionData.next(data);
            this.redData = data;
            this.redeemFormInitialisation();
        });*/
        this.redemptionService.redemptionObservable.subscribe(data => {
            this.logger.debug(this.className, data);
            this.redData = data;
            this.redeemFormInitialisation();
        });

        /*this.route.params.switchMap((params: Params) => {
            this.logger.debug(params);
            return this.exploreFundsService.getSearchFundFromRoute(params);
        })
            .subscribe(searchInput => {
            this.headerService.onDemandProgressBar();
            this.searchInput = searchInput;
            this.logger.debug(this.className, "emitting search Input");
            this.exploreFundsService.setFundSearchInput(searchInput);
            this.titleService.setTitle(this.exploreFundsService.getExploreTitle(searchInput));
            this.logger.debug(this.className, searchInput);
            this.exploreFundsService.search(searchInput).subscribe(results => {
                this.searchResults = results;
                this.checkAgainstRedemptionList();
                this.exploreFundsService.setFundSearchResult(results);
                this.logger.debug(results);
            });
        });*/

    }

    redeemFormInitialisation() {
        let fundFormGroupArray = this.fb.array([]);
        let fundFormErrorsArray = [];
        let selectedBank = this.redemptionService.redemptionData.getValue()['selectedBank'];
        let selectedNominee = this.redemptionService.redemptionData.getValue()['selectedNominee'];
        this.totalRedemptionAmount = 0;

        this.redData.fundsData.forEach(fundData => {
            let fund = fundData.fund;
            let option = fundData.option;
            let plan = fundData.plan;
            let selectedRedemptionMode = fundData.selectedRedemptionMode;
            let amount = fundData.amount;

            this.totalRedemptionAmount += amount;

            if (selectedRedemptionMode == RedemptionModeEnum[RedemptionModeEnum.SWP]) {
                let selectedAWPFrequency = fundData.selectedAWPFrequency;
                let selectedAWPDate = fundData.selectedCreditDate;
                let noOfInstallments = fundData.noOfInstallment;


                fundFormGroupArray.push(this.fb.group({
                    // redemptionMode: [selectedRedemptionMode || '', Validators.required],
                    selectedAWPFrequency: [selectedAWPFrequency || '', Validators.required],
                    selectedAWPDate: [selectedAWPDate || '', Validators.required],
                    noOfInstallments: [noOfInstallments || '', Validators.required],
                    redemptionType: [this.fullRedemption || false, Validators.required],
                    amountUnitFlag: [this.amountOrUnit || false, Validators.required],
                    redemptionAmountOrUnit: [amount || '', Validators.required],
                }));
                fundFormErrorsArray.push({
                    // redemptionMode: '',
                    selectedAWPFrequency: '',
                    selectedAWPDate: '',
                    noOfInstallments: '',
                    redemptionType: '',
                    amountUnitFlag: '',
                    redemptionAmountOrUnit: '',
                });
            }
            else {
                fundFormGroupArray.push(this.fb.group({
                    // redemptionMode: [selectedRedemptionMode || '', Validators.required],
                    redemptionType: [false, Validators.required],
                    amountUnitFlag: [false, Validators.required],
                    redemptionAmountOrUnit: [amount || '', Validators.required]
                }));
                fundFormErrorsArray.push({
                    // redemptionMode: '',
                    redemptionType: '',
                    amountUnitFlag: '',
                    redemptionAmountOrUnit: ''
                });
            }
        });


        /*if (this.nomineeExists) {
            this.checkoutFormGroup = this.fb.group({
                selectedNominee: [selectedNominee || '', Validators.required],
                selectedBank: [selectedBank || '', Validators.required],
                fundsData: fundFormGroupArray
            });
            this.logger.debug(this.className, "Form ", this.checkoutFormGroup);

            this.checkoutFormErrors = {
                selectedNominee: '',
                selectedBank: '',
                fundsData: fundFormErrorsArray
            };
        } else {*/
            this.redemptionFormGroup = this.fb.group({
                // selectedBank: [selectedBank || '', Validators.required],
                fundsData: fundFormGroupArray
            });

            this.redemptionFormErrors = {
                // selectedBank: '',
                fundsData: fundFormErrorsArray
            };
        // }

        this.redemptionFormGroup.valueChanges
            .subscribe(data => {
                if (!this.redemptionFormGroup) {
                    return;
                } else {
                    // this.updateErrorMessages();
                    this.updateModelValues();
                    this.logger.debug(this.className, this.redemptionFormGroup);
                }
            });
    }


    //checking if the fund is in comparison list then it is updated else it is not marked
    checkAgainstRedemptionList() {
        if (this.redeemFundList.length > 0 && this.searchResults.funds.length > 0) {
            this.searchResults.funds.forEach(fund => {
                let fundExists = false;
                this.redeemFundList.forEach(comparisonFund => {
                    if (comparisonFund.id == fund.id)
                        fundExists = true;
                });
                if (fundExists) {
                    fund.selected = true;
                } else {
                    fund.selected = false;
                }
            })
        } else {
            this.searchResults.funds.forEach(fund => fund.selected = false)
        }
    }

    updateModelValues() {
        const form = this.redemptionFormGroup;
        this.totalRedemptionAmount = 0;
        let formFundsArray = form.get('fundsData') as FormArray;

        formFundsArray.controls.forEach((fundGroup, index) => {
            this.logger.debug(this.className, "formFundsArray: ", formFundsArray.at(index).get('amountUnitFlag').status);
            // this.logger.debug(this.className, formGroup.get('investmentAmount').value);

            /*if (fundGroup.get('redemptionType').value && (fundGroup.get('amountUnitFlag').value.value || !fundGroup.get('amountUnitFlag').value.disabled)) {
                // formFundsArray.at(index).get('amountUnitFlag').setValue(false);
                fundGroup.get('amountUnitFlag').setValue({value: false, disabled: true});
                // formFundsArray.at(index).get('amountUnitFlag').setValue({value: false, disabled: true});
            }*/
            if (fundGroup.get('redemptionType').value && (fundGroup.get('amountUnitFlag').value)) {
                // formFundsArray.at(index).get('amountUnitFlag').setValue(false);
                fundGroup.get('amountUnitFlag').setValue(false);
                // formFundsArray.at(index).get('amountUnitFlag').setValue({value: false, disabled: true});
            }
           /* if (formGroup.get('redemptionType') && !formGroup.get('amountUnitFlag')){
                formGroup.get('amountUnitFlag').disable()
            }*/
            //updating total investment amount

            // this.checkoutData.fundsData[index].selectedInvestmentMode = formGroup.get('redemptionMode').value;
            /*if (formGroup.get('investmentMode').value == RedemptionModeEnum[RedemptionModeEnum.SWP]) {
                this.logger.debug(this.className, formGroup.get('investmentMode').value);
                this.redemptionService.redemptionData.getValue().fundsData[index].selectedAIPFrequency = formGroup.get('selectedAIPFrequency').value;
                this.redemptionService.redemptionData.getValue().fundsData[index].selectedDeductionDate = formGroup.get('selectedDeductionDate').value;
                this.redemptionService.redemptionData.getValue().fundsData[index].noOfInstallment = formGroup.get('noOfInstallments').value;
            }
            this.checkoutData.fundsData[index].amount = formGroup.get('investmentAmount').value;*/
        });

        /*this.checkoutData.selectedBank = form.get('selectedBank').value;
        if (this.nomineeExists) {
            this.checkoutData.selectedNominee = form.get('selectedNominee').value;
        }*/
        this.logger.debug(this.className, "RedemptionData ", this.redemptionService.redemptionData);
    }

    removeFund(fund: RedemptionFund, index: number) {
        let redemptionData = this.redemptionService.redemptionData.getValue();
        redemptionData.fundsData.splice(index, 1);
        this.redemptionService.redemptionData.next(redemptionData);
    }

    onRedemptionProceed(){
        if (this.redemptionFormGroup.valid) {
            this.urlAccessGuard.allow = true;
            this.updateModelValues();
            this.redemptionService.postCheckoutData().subscribe(data => {
                if (data && !data['success']) {
                    this.snackBarService.showSnackBar("Please try again later.", "Okay", this.viewContainerRef);
                }
            });
            this.router.navigate(['summary'], {relativeTo: this.route.parent});
        } else {
            this.shake = true;
            this.freezeShake();
            this.logger.debug(this.className, "RedemptionFormGroup: ", this.redemptionFormGroup);
            // this.showErrorOnSubmit();
            this.snackBarService.showSnackBar(" Please specify the details to proceed to redemption!", "Okay", this.viewContainerRef);
        }
    }

    freezeShake() {
        this.shakeSub = Observable.timer(1000).subscribe(t => {
            this.shake = false;
        });
    }

}
