import {Component, OnInit, ViewContainerRef} from "@angular/core";
import {ActivatedRoute, Router} from "@angular/router";
import {Checkout} from "./checkout";
import {FormGroup, FormBuilder, Validators, FormArray, FormControl} from "@angular/forms";
import {InvestmentModeEnum} from "../enum/investment-mode-enum";
import {NumberValidator} from "../validators/validator";
import {CheckoutService} from "./checkout.service";
import {MdSnackBar, MdSnackBarConfig, MdDialog, MdDialogConfig} from "@angular/material";
import {Fund} from "../models/fund";
import {CartService} from "../services/cart.service";
import {Plan, DivOptionList, DivOption} from "./plan";
import {Logger} from "../shared/logger/logger";
import {LookUpService} from "../services/lookup.service";
import {CNDGroup} from "../constants/CNDGroup";
import {CheckoutValidationMessages} from "./checkoutFormValidations";
import {ConfirmationDialogComponent} from "../shared/confirmation-dialog.component";

@Component({
    selector: 'app-checkout',
    templateUrl: './checkout.component.html',
    styleUrls: ['./checkout.styles.scss']
})
export class CheckoutComponent implements OnInit {

    private checkoutData: Checkout;
    private checkoutFormGroup: FormGroup;
    private totalInvestmentAmount: number;
    private checkoutFormErrors: any;
    private investmentMode = InvestmentModeEnum;
    private sipDisclaimerText: string;

    constructor(private route: ActivatedRoute, private router: Router, private fb: FormBuilder,
                private checkoutService: CheckoutService, private cartService: CartService,
                private mdSnackBar: MdSnackBar, private viewContainerRef: ViewContainerRef,
                private dialog: MdDialog, private logger: Logger, private lookupService: LookUpService) {

        //variables initialisation
        this.sipDisclaimerText = "Note: First SIP Installment will be deducted today"
        this.checkoutFormErrors = {};
        this.totalInvestmentAmount = 0;
    }

    ngOnInit() {
        this.route.data.forEach((data: {checkoutData: Checkout}) => {
            this.checkoutData = data.checkoutData;
        });

        this.lookupService.getByGroup(CNDGroup.RELATIONSHIP).subscribe(data => {
            //get relation ship names
        });

        this.prepareDisplayDataLists();
        this.setFormFieldDefaults();
        this.checkOutFormInitialisation();

        this.checkoutFormGroup.valueChanges
            .subscribe(data => {
                this.onValueChanged(data);
            });
        // this.onValueChanged(); // (re)set validation messages now
    }

    prepareDisplayDataLists() {
        //prepare funds data

    }

    setFormFieldDefaults() {

        //set fund defaults
        this.checkoutData.fundsData.forEach(fundData => {
            fundData.selectedInvestmentMode = fundData.fund.investmentMode;
            fundData.options.forEach(fundOption => {
                if (fundOption.isDefault) {
                    fundData.selectedPlan = fundOption.schemePlan + fundOption.dividendFrequency;
                    fundData.selectedOption = fundOption.dividendOption;
                    fundData.selectedAIPFrequency = fundOption.aipData.frequency;
                    fundData.noOfInstallment = fundOption.aipData.minNoOfInstallment;
                    fundData.amount = fundOption.aipData.minAmount;
                }
            })
        });

        //set bank defaults
        this.checkoutData.selectedBank = this.checkoutData.bankList[0];

        //set nominee defaults
        this.checkoutData.selectedNominee = this.checkoutData.nomineeList[0];
    }


    checkOutFormInitialisation() {
        let fundFormGroupArray = this.fb.array([]);
        let fundFormErrorsArray = [];
        let selectedBank = this.checkoutData.selectedBank;
        let selectedNominee = this.checkoutData.selectedNominee;

        this.checkoutData.fundsData.forEach(fundData => {
            let fund = fundData.fund;

            let selectedOption = fundData.selectedOption;
            let selectedPlan = fundData.selectedPlan;
            let selectedInvestmentMode = fund.investmentMode;
            let selectedAIPFrequency = fundData.selectedAIPFrequency;

            if (selectedInvestmentMode == InvestmentModeEnum[InvestmentModeEnum.SIP]) {
                fundFormGroupArray.push(this.fb.group({
                    investmentMode: [selectedInvestmentMode, [Validators.required]],
                    selectedPlan: [selectedPlan, [Validators.required]],
                    selectedOption: [selectedOption, [Validators.required]],
                    selectedAIPFrequency: [selectedAIPFrequency, [Validators.required]],
                    selectedDeductionDate: ['', [Validators.required]],
                    noOfInstallments: [0, [Validators.required]],
                    investmentAmount: [0, Validators.compose([Validators.required, NumberValidator.minValue(+fund.basicFactsheet.minSIPAmt), NumberValidator.isHundredMultiple()])],
                }));
                fundFormErrorsArray.push({
                    investmentMode: '',
                    selectedPlan: '',
                    selectedOption: '',
                    selectedAIPFrequency: '',
                    selectedDeductionDate: '',
                    noOfInstallments: '',
                    investmentAmount: '',
                });
            } else {
                fundFormGroupArray.push(this.fb.group({
                    investmentMode: [selectedInvestmentMode, [Validators.required]],
                    selectedPlan: [selectedPlan, [Validators.required]],
                    selectedOption: [selectedOption, [Validators.required]],
                    investmentAmount: [0, [Validators.required]]
                }));
                fundFormErrorsArray.push({
                    investmentMode: '',
                    selectedPlan: '',
                    selectedOption: '',
                    investmentAmount: ''
                });
            }
        });

        this.checkoutFormGroup = this.fb.group({
            selectedNominee: [selectedNominee, [Validators.required]],
            selectedBank: [selectedBank, [Validators.required]],
            fundsData: fundFormGroupArray
        });

        this.checkoutFormErrors = {
            selectedNominee: '',
            selectedBank: '',
            fundsData: fundFormErrorsArray
        };
    }

    onValueChanged(data?: any) {
        if (!this.checkoutFormGroup) {
            return;
        } else {
            this.updateErrorMessages();
        }

    }

    updateErrorMessages() {
        const form = this.checkoutFormGroup;
        this.totalInvestmentAmount = 0;

        //selected Bank Validation
        this.checkoutFormErrors.selectedBank = '';
        let selectedBankControl = form.get('selectedBank');
        if (selectedBankControl && selectedBankControl.dirty && !selectedBankControl.valid) {
            const messages = CheckoutValidationMessages.bank
            for (const key in selectedBankControl.errors) {
                this.checkoutFormErrors.selectedBank += messages[key] + ' ';
            }
        }

        //selected Nominee Validation
        this.checkoutFormErrors.selectedNominee = '';
        let selectedNomineeControl = form.get('selectedNominee');
        if (selectedNomineeControl && selectedNomineeControl.dirty && !selectedNomineeControl.valid) {
            const messages = CheckoutValidationMessages.nominee
            for (const key in selectedNomineeControl.errors) {
                this.checkoutFormErrors.selectedNominee += messages[key] + ' ';
            }
        }

        //funds validation
        let formFundsArray = form.get('fundsData') as FormArray;
        this.checkoutFormErrors['fundsData'].forEach((fund, index) => {

            //updating total investment amount
            this.totalInvestmentAmount += +formFundsArray.at(index).get('investmentAmount').value;

            //selected investmentMode
            fund.investmentMode = '';
            let investmentModeControl = formFundsArray.at(index).get('investmentMode');
            if (investmentModeControl && investmentModeControl.dirty && !investmentModeControl.valid) {
                const messages = CheckoutValidationMessages.plan;
                for (const key in investmentModeControl.errors) {
                    fund.investmentMode += messages[key] + ' ';
                }
            }

            //selected plan
            fund.selectedPlan = '';
            let planControl = formFundsArray.at(index).get('selectedPlan');
            if (planControl && planControl.dirty && !planControl.valid) {
                const messages = CheckoutValidationMessages.plan;
                for (const key in planControl.errors) {
                    fund.selectedPlan += messages[key] + ' ';
                }
            }

            //selected option
            fund.selectedOption = '';
            let optionControl = formFundsArray.at(index).get('selectedOption');
            if (optionControl && optionControl.dirty && !optionControl.valid) {
                const messages = CheckoutValidationMessages.option;
                for (const key in optionControl.errors) {
                    fund.selectedOption += messages[key] + ' ';
                }
            }


            //selected AIP Frequency
            fund.selectedAIPFrequency = '';
            let aipFrequencyControl = formFundsArray.at(index).get('selectedAIPFrequency');
            if (aipFrequencyControl && aipFrequencyControl.dirty && !aipFrequencyControl.valid) {
                const messages = CheckoutValidationMessages.aipFrequency;
                for (const key in aipFrequencyControl.errors) {
                    fund.selectedAIPFrequency += messages[key] + ' ';
                }
            }

            //selected AIP Date
            fund.selectedDeductionDate = '';
            let aipDateControl = formFundsArray.at(index).get('selectedDeductionDate');
            if (aipDateControl && aipDateControl.dirty && !aipDateControl.valid) {
                const messages = CheckoutValidationMessages.aipDate;
                for (const key in aipDateControl.errors) {
                    fund.selectedDeductionDate += messages[key] + ' ';
                }
            }

            //selected no of installments
            fund.noOfInstallments = '';
            let noOfInstallmentsControl = formFundsArray.at(index).get('noOfInstallments');
            if (noOfInstallmentsControl && noOfInstallmentsControl.dirty && !noOfInstallmentsControl.valid) {
                const messages = CheckoutValidationMessages.installments;
                for (const key in noOfInstallmentsControl.errors) {
                    fund.noOfInstallments += messages[key] + ' ';
                }
            }

            //selected investmentAmount
            fund.investmentAmount = '';
            let deductionDateControl = formFundsArray.at(index).get('investmentAmount');
            if (deductionDateControl && deductionDateControl.dirty && !deductionDateControl.valid) {
                const messages = CheckoutValidationMessages.investmentAmount
                console.log(deductionDateControl.errors);
                for (const key in deductionDateControl.errors) {
                    fund.selectedDeductionDate += messages[key] + ' ';
                }
            }
        });
    }


    removeFund(removalFund: Fund, fundIndex: number) {

        //console.log("fund removal started!");
        this.checkoutData.fundsData = this.checkoutData.fundsData.filter((fundData, index) => index != fundIndex);
        this.checkoutFormErrors['fundsData'] = this.checkoutFormErrors['fundsData'].filter((fund, index) => index != fundIndex);
        let newFundsData = this.fb.array([]);
        let currentFormArray = this.checkoutFormGroup.get('fundsData') as FormArray;
        let slicedFormGroups = currentFormArray.controls.filter((formGroup, index) => index != fundIndex);
        slicedFormGroups.forEach(grp => newFundsData.push(grp));
        this.checkoutFormGroup.setControl("fundsData", newFundsData);
        this.cartService.removeFundFromCart([removalFund]).subscribe(res => {
                let config = new MdSnackBarConfig();
                config.viewContainerRef = this.viewContainerRef;
                config.duration = 2000;
                this.mdSnackBar.open(res.response, "Okay", config);
            }
        )
        //console.log("fund removal ended!");
    }

    onCheckoutSubmit() {
        if (this.checkoutFormGroup.valid) {
            console.log("checkout form submitted!");
        } else {
            console.log(this.checkoutFormGroup);
            let config = new MdSnackBarConfig();
            config.duration = 2000;
            config.viewContainerRef = this.viewContainerRef;
            this.mdSnackBar.open("Please complete the checkout form before submitting!", "Okay", config);
        }
    }


    //triggered when the user wants to change the investment mode.
    investmentModeChangeTrigger(index) {
        //console.log("open");
        let fundsArray = this.checkoutFormGroup.get("fundsData") as FormArray;
        let fundGroup = fundsArray.at(index) as FormGroup;

        //add only if the current investment mode is SIP
        if (fundGroup.get("investmentMode").value == InvestmentModeEnum[InvestmentModeEnum.LUMPSUM]) {
            fundGroup.addControl("selectedAIPFrequency", new FormControl('', [Validators.required]))
            fundGroup.addControl("selectedDeductionDate", new FormControl('', [Validators.required]));
            fundGroup.addControl("noOfInstallments", new FormControl('', [Validators.required]));
        }
    }

    investmentModeUpdate(fund: Fund, index: number) {
        //console.log("close");
        let fundFoundCount = 0;
        let fundsArray = this.checkoutFormGroup.get("fundsData") as FormArray;
        let fundGroup = fundsArray.at(index) as FormGroup;

        //checking if duplicate created due to change of investment mode
        fundsArray.controls.forEach((item, idx) => {
            if (this.checkoutData.fundsData[idx].fund.id == fund.id &&
                item.get("investmentMode").value == fundGroup.get("investmentMode").value) {
                fundFoundCount++;
            }
        });

        //if duplication found then asking user for confirmation on removal
        if (fundFoundCount > 1) {
            let config = new MdDialogConfig();
            config.width = "300px";
            config.disableClose = true;
            config.viewContainerRef = this.viewContainerRef;

            let confirmationConfig = {
                confirmationTitle: "Please Confirm!",
                confirmationText: "Two funds cannot have same investment modes, do you want to remove this fund?",
                confirmationActions: [['Y', "Yes"], ['N', "No"]]

            }

            let dialogRef = this.dialog.open(ConfirmationDialogComponent, config);
            dialogRef.componentInstance.config = confirmationConfig;
            dialogRef.afterClosed().subscribe(result => {

                //user agrees to remove duplicate fund
                if (result[0] == 'Y') {
                    console.log("yes");
                    this.removeFund(fund, index);
                } else {  //user disagrees to remove the fund then we need to revert back to same state.
                    console.log("no");
                    //toggle back the investment mode
                    if (fundGroup.get("investmentMode").value == InvestmentModeEnum[InvestmentModeEnum.SIP]) {
                        fundGroup.setControl("investmentMode", new FormControl(InvestmentModeEnum[InvestmentModeEnum.LUMPSUM], [Validators.required]));
                        fundGroup.removeControl("selectedAIPFrequency");
                        fundGroup.removeControl("selectedDeductionDate");
                        fundGroup.removeControl("noOfInstallments");
                    } else {
                        fundGroup.setControl("investmentMode", new FormControl(InvestmentModeEnum[InvestmentModeEnum.SIP], [Validators.required]));
                    }

                }
            });
        } else {
            //if no duplication found and the investment mode is lumpsum then we need to remove the added controls.
            if (fundGroup.get("investmentMode").value == InvestmentModeEnum[InvestmentModeEnum.LUMPSUM]) {
                fundGroup.removeControl("selectedAIPFrequency");
                fundGroup.removeControl("selectedDeductionDate");
                fundGroup.removeControl("noOfInstallments");
            }
        }
    }
}