import {Component, OnInit, animate, style, transition, trigger, state} from "@angular/core";
import {SipReturnsQuestions} from "./questions";
import {CheckReturns} from "./goals";
import {CalculationKeys} from "./calculation-keys";
import {SipCalcGoal} from "./sip-calc-goal";
import {SipCalcQuestion} from "./sip-calc-question";
import {Router, ActivatedRoute} from "@angular/router";

@Component({
    selector: 'app-returns-based',
    templateUrl: './returns-based.component.html',
    styleUrls: ['./sip-calc.styles.scss'],
})
export class ReturnsBasedComponent implements OnInit {

    orientation: string;
    selectedIndex: number = 0;
    questions: SipCalcQuestion[];
    goal: SipCalcGoal;
    principal: number = 0;
    years: number = 0;
    amount: number = 0;
    inflation: number = 0;
    rate: number = 0;
    graphData: any[][] = [];
    considerInflation: boolean;
    showReCalculateButton: boolean;
    investedAmount: number;
    trySimulation: boolean;

    constructor(private router: Router, private route: ActivatedRoute) {
    }

    next() {
        this.orientation = 'next';
        if (this.selectedIndex == 0) {
            this.selectedIndex = 2;
        } else {
            this.calculate();
        }
    }

    prev() {
        this.orientation = 'prev';
        this.selectedIndex = 0;
    }


    inflationAdjustment(value: any) {
        this.considerInflation = value;
        this.calculate();
    }

    recalculate(value: any) {
        if (value && value > 0) {
            this.calculate()
        }
    }


    calculate() {
        this.showReCalculateButton = false;
        this.questions.forEach(question => {
            switch (question.calculationKey) {
                case CalculationKeys.inflation:
                    this.inflation = question.answer;
                    break;
                case CalculationKeys.principal:
                    this.principal = question.answer;
                    break;
                case CalculationKeys.rate:
                    this.rate = question.answer;
                    break;
                case CalculationKeys.years:
                    this.years = question.answer;
                    break;
                default:
                    break;
            }
        });

        //calculations for all other goals
        let applicableRate;
        if (this.considerInflation) {
            applicableRate = (this.rate - this.inflation) / 100;
        } else {
            applicableRate = this.rate / 100;
        }


        if (this.trySimulation) {

        }
        /*
         //inflation adjusted amount
         applicableRate = (rate - inflation) / 100;
         compoundingFrequency = how many times is it compounding in one year.
         calculationFactor = (1+applicableRate/100)^(1/compoundingFrequency)
         months = years*12
         numerator  = [calculationFactor -1]
         denom = [calculationFactor^n-1] * [calculationFactor]
         P = adjustedAmount * numerator / denominator ;

         */
        let months: number = this.years * 12;
        let compoundFrequency: number = 12;
        let calculationFactor: number = (1 + applicableRate) ** (1 / compoundFrequency);
        let denom: number = calculationFactor - 1;
        let numerator: number = (calculationFactor ** months - 1) * calculationFactor;
        let amount: number = this.principal * numerator / denom;
        this.investedAmount = this.principal * months;
        //console.log("adjustedAmount:" + adjustedAmount);
        /*console.log("applicableRate:" + applicableRate);
         console.log("months:" + months);
         console.log("calculationFactor:" + calculationFactor);
         console.log("numerator:" + numerator);
         console.log("denom:" + denom);
         console.log("amount:" + amount);*/
        //calculation for graph
        let graphSIPAmount: number = 0;
        let graphInvestedAmount: number = 0;
        this.graphData = [];
        this.graphData.push(['Time', 'Invested Amount', 'SIP Return']);
        for (let graphTime = 1; graphTime <= this.years; graphTime++) {
            graphSIPAmount += (this.principal * 12) * ((1 + applicableRate) ** graphTime);
            graphInvestedAmount += this.principal * 12;
            this.graphData.push([graphTime, Math.ceil(graphInvestedAmount), Math.ceil(graphSIPAmount)]);
        }
        this.amount = Math.ceil(amount);


    }


    ngOnInit() {
        this.questions = SipReturnsQuestions;
        this.goal = CheckReturns;
        this.graphData.push(['Time', 'Invested Amount', 'SIP Return']);
        this.considerInflation = true;
        this.showReCalculateButton = false;
    }

    public line_ChartOptions = {
        title: 'Your SIP Performance',
        curveType: 'function',
        hAxis: {
            title: 'Time(in yrs)'
        },
        vAxis: {
            title: 'Amount(in rupees)'
        },
        legend: {position: 'bottom'}
    };

}