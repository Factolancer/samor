import {Component, OnInit, OnDestroy} from "@angular/core";
import {FundTransactions, TransactionReport} from "../transaction";
import {Fund} from "../fund";
import {ReportService} from "../report.service";
import {Subscription} from "rxjs";
import {TransactionType} from "./transaction-type";
import {TransactionFilter} from "./transaction-filter";
import {TransactionReportService} from "./transaction-report.service";
import {LogoImdData} from "../constants";
import {CustomJspdf} from "./jsPDFext";
import {isNullOrUndefined} from "util";
import {DatePipe} from "@angular/common";

//declare let jsPDF;

@Component({
    selector: 'app-transaction-report',
    templateUrl: './transaction-report.component.html',
    styleUrls: ['../report.styles.scss']
})
export class TransactionReportComponent implements OnInit,OnDestroy {

    //@Input('fundIndex')fundIndex:number;

    transactionReport:TransactionReport;
    funds: FundTransactions[];
    fundList: Fund[];
    selectedFundId: number;
    selectedTransType: string;
    fundIndexSubscription: Subscription;
    transactionTabSubscription: Subscription;
    transactionTypes: TransactionType[];
    startDate: string;
    endDate: string;
    filterError: boolean;

    constructor(private reportService: ReportService, private transactionReportService: TransactionReportService) {
        this.fundIndexSubscription = this.reportService.fundIndexResult.subscribe((fundIndex: number) => {

            let currentDate = new Date()
            this.endDate = new DatePipe("en-US").transform(currentDate,'yyyy-MM-dd');
            this.startDate = new DatePipe("en-US").transform(currentDate.setDate(currentDate.getDate() - 180),'yyyy-MM-dd');
            this.filterTransactions();
            this.selectedFundId = fundIndex;

        });
        this.transactionTabSubscription = this.reportService.transactionTabResult.subscribe((loadTab: boolean) => {
            if (loadTab == true) {
                let currentDate = new Date()
                this.endDate = new DatePipe("en-US").transform(currentDate,'yyyy-MM-dd');
                this.startDate = new DatePipe("en-US").transform(currentDate.setDate(currentDate.getDate() - 180),'yyyy-MM-dd');
                this.getTransactionFilterValues();
            } else {
                this.fundList = [];
                this.transactionTypes = [];
            }
        });
    }

    ngOnInit() {

    }

    getTransactions(transFilter: TransactionFilter) {

        this.transactionReportService.getTransactions(transFilter)
            .subscribe(transactionReport => {
                this.transactionReport = transactionReport as TransactionReport;
                this.funds = this.transactionReport.transactionReportList
            });

    }

    getTransactionFilterValues(){
        this.transactionReportService.getTransactionFilterValues().subscribe(transactionReport => {
            this.transactionReport = transactionReport as TransactionReport;
            let fundsList = this.transactionReport.transactionReportList as FundTransactions[];
            this.transactionTypes = [new TransactionType("", "All")];
            let transactionTypeList = this.transactionReport.transactionTypeList;
            for(let transactionType of transactionTypeList){
                this.transactionTypes.push(new TransactionType(transactionType.typeKey,transactionType.typeValue))
            }
            this.fundList = [new Fund(0, "All")];
            this.selectedFundId = 0;
            this.selectedTransType = "";
            for (let fund of fundsList) {
                this.fundList.push(new Fund(fund.fundId, fund.fundName));
            }
        });
    }
    getFundsList() {
        this.transactionReportService.getTransactions(new TransactionFilter)
            .subscribe(transactionReport => {
                this.transactionReport = transactionReport as TransactionReport;
                let fundsList = this.transactionReport.transactionReportList as FundTransactions[];
                this.transactionTypes = [new TransactionType("", "All")];
                let transactionTypeList = this.transactionReport.transactionTypeList;
                for(let transactionType of transactionTypeList){
                    this.transactionTypes.push(new TransactionType(transactionType.typeKey,transactionType.typeValue))
                }
                this.fundList = [new Fund(0, "All")];
                this.selectedFundId = 0;
                this.selectedTransType = "";
                for (let fund of fundsList) {
                    this.fundList.push(new Fund(fund.fundId, fund.fundName));
                }
            });
    }

    filterTransactions() {

        let transFilter = new TransactionFilter();
        transFilter.startDate = new Date(this.startDate);
        transFilter.endDate = new Date(this.endDate);
        transFilter.fundId = this.selectedFundId;
        transFilter.transType = this.selectedTransType;
        if (this.startDate != undefined && this.endDate != undefined) {
            this.filterError = false;
            if (this.startDate > this.endDate) {
                this.filterError = true;
                this.funds = [];
                alert('Start Date must be less than or equal to End Date');

                return;
            }
            this.getTransactions(transFilter);
        } else {
            this.funds = [];
            alert('Please Enter Both Start Date And End Date');
        }
    }

    ngOnDestroy() {
        this.fundIndexSubscription.unsubscribe();
        this.transactionTabSubscription.unsubscribe();
    }

    download() {

        var wrapperPdf = new CustomJspdf('p', 'pt');
        var pdf = wrapperPdf.jspdf;
        var startY = 100;
        pdf.setFontSize(12);
        wrapperPdf.myText("FundTransactions Details", {align: "center"}, 0, startY);
        pdf.setFontStyle('normal');
        pdf.setFontSize(8);

        wrapperPdf.text("Start Date: " + this.startDate, 40, startY + 30);
        wrapperPdf.text("End Date: " + this.endDate, 40, startY + 40);
        let transName: string = "";
        for (let trans of this.transactionTypes) {
            if (trans.id == this.selectedTransType) {
                transName = trans.transType;
            }
        }
        wrapperPdf.text("FundTransactions Type: " + transName, 40, startY + 50);


        var columns = [{title: "Date", dataKey: "transDate"},
            {title: "FundTransactions Description", dataKey: "transDesc"},
            {title: "Amount(Rs.)", dataKey: "amount"},
            {title: "NAV(Rs.)", dataKey: "price"},
            {title: "Units", dataKey: "units"},
            {title: "Value", dataKey: "value"}];
        var totalPagesExp = "{total_pages_count_string}";
        var currentpage = 0;
        let currFund: number = 0;
        let newPage: boolean;
        for (let fund of this.funds) {
            var rows = [{transDate:"",transDesc: "Opening Balance",amount:"",price:"", units: fund.openingUnits, value: fund.openingValue}];
            for (let transaction of fund.transactionList) {

                let formattedDate = new DatePipe("en-US").transform(transaction.transDate,'dd-MM-yyyy');
                rows.push({transDate:formattedDate,transDesc: transaction.transDesc,amount:transaction.amount+"",price:transaction.price+"", units: transaction.units, value: transaction.value});
            }
            rows.push({transDate:"",transDesc: "Closing Balance",amount:"",price:"", units: fund.closingUnits, value: fund.closingValue});
            pdf.setFontStyle('normal');
            pdf.setFontSize(8);
            if (currFund == 0) {
                wrapperPdf.text("Folio No: " + fund.folioNo, 40, startY + 70);
                wrapperPdf.myText("Mode of Holding: " + fund.modeOfHolding, {align: "right"}, 0, startY + 70);
                wrapperPdf.text("Fund Name: " + fund.fundName, 40, startY + 80);
                wrapperPdf.myText("Fund Type: " + fund.fundType, {align: "right"}, 0, startY + 80);
            } else {
                wrapperPdf.text("Folio No: " + fund.folioNo, 40, pdf.autoTableEndPosY() + 25);
                wrapperPdf.myText("Mode of Holding: " + fund.modeOfHolding, {align: "right"}, 0, pdf.autoTableEndPosY() + 25);
                wrapperPdf.text("Fund Name: " + fund.fundName, 40, pdf.autoTableEndPosY() + 35);
                wrapperPdf.myText("Fund Type: " + fund.fundType, {align: "right"}, 0, pdf.autoTableEndPosY() + 35);
            }
            var pageContent = function (data) {
                // HEADER
                pdf.setFontSize(20);
                pdf.setTextColor(40);
                pdf.setFontStyle('normal');
                pdf.addImage(LogoImdData, 'JPEG', data.settings.margin.left, 40, 85, 18);
                // FOOTER
                if (currentpage < pdf.internal.getNumberOfPages()) {
                    var str = "Page " + pdf.internal.getNumberOfPages();
                    if (typeof pdf.putTotalPages === 'function') {
                        str = str + " of " + totalPagesExp;
                    }
                    pdf.setFontSize(10);
                    pdf.setFontStyle('normal');
                    pdf.text(str, data.settings.margin.left, pdf.internal.pageSize.height - 25);
                    currentpage = pdf.internal.getNumberOfPages();


                }
            };

            var tableStyle = {
                styles: {overflow: 'linebreak'},
                headerStyles: {rowHeight: 15, fontSize: 8},
                bodyStyles: {rowHeight: 12, fontSize: 8, valign: 'middle'},
                pageBreak: 'avoid',
                addPageContent: pageContent,
                margin: {top: 90},
                drawCell: function (cell, data) {
                    if (data.row.index == 0 || data.row.index == rows.length - 1) {
                        pdf.setFontStyle('bold');
                    }
                }
            };
            if (currFund == 0) {
                tableStyle['startY'] = startY + 85
            } else {
                tableStyle['startY'] = pdf.autoTableEndPosY() + 40
            }
            pdf.autoTable(columns, rows, tableStyle);
            currFund++;
        }
        if (typeof pdf.putTotalPages === 'function') {
            pdf.putTotalPages(totalPagesExp);
        }
        pdf.save('FundTransactions Report.pdf');
    }
}
