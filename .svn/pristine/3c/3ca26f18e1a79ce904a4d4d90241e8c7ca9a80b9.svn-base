import {Component, OnInit, OnDestroy, ViewContainerRef} from "@angular/core";
import {MdDialog} from "@angular/material/dialog/index";

import {SipReturnsQuestions} from "./questions";
import {CheckReturns} from "./goals";
import {CalculationKeys} from "./calculation-keys";
import {SipCalcGoal} from "./sip-calc-goal";
import {SipCalcQuestion} from "./sip-calc-question";
import {Router, ActivatedRoute} from "@angular/router";
import {Logger} from "../../core/logger/logger";
import {disclaimers} from "../../../properties/discalimers";
import {TitleService} from "../../core/services/title.service";
import {DialogService} from "../../core/services/dialog.service";
import {FormGroup, Validators, FormControl, FormBuilder} from "@angular/forms";
import {NumberValidator} from "../../validators/validator";
import {SIPCalcValidationMessages} from "./sip-calc-validations";
import {SnackBarService} from "../../core/services/snack-bar.service";

@Component({
    selector: 'app-sip-returns-results',
    templateUrl: './results-reutrns.component.html',
    styleUrls: ['./sip-calc.styles.scss']
})

export class ReturnsResultsComponent implements OnInit, OnDestroy {
    chart: any;
    orientation: string;
    selectedIndex: number = 0;
    questions: SipCalcQuestion[];
    goal: SipCalcGoal;
    principal: number = 0;
    years: number = 0;
    amount: number = 0;
    inflation: number = 0;
    rate: number = 0;
    xCategories: any[] = [];
    SIPAmtData: any[] = [];
    investedAmtData: any[] = [];
    floor: number;
    ceiling: number;
    considerInflation: boolean;
    showReCalculateButton: boolean;
    investedAmount: number;
    options: any;
    calcFormGroup: FormGroup;
    calcFormErrors: any;
    className: string

    constructor(private router: Router, private route: ActivatedRoute, private logger: Logger,
                private viewContainerRef: ViewContainerRef, private dialog: MdDialog,
                private titleService: TitleService, private dialogService: DialogService,
                private fb: FormBuilder, private snackBarService: SnackBarService) {
    }


    ngOnInit() {
        this.className = "ReturnsResultsComponent";
        this.questions = SipReturnsQuestions;
        this.goal = CheckReturns;
        this.titleService.setTitle("sip_calculator_goal", {goal: this.goal.name});
        this.considerInflation = true;
        this.initializeChart();
        this.initializeForm();
        this.calculate();
    }

    ngOnDestroy() {

    }

    inflationAdjustment(value: any) {
        this.considerInflation = value;
        this.calculate();

        this.chart.series[0].setData(this.SIPAmtData);
        this.chart.series[1].setData(this.investedAmtData);
    }

    saveChartInstance(chartInstance: any) {
        this.logger.debug(chartInstance);
        this.chart = chartInstance;
    }

    calculate() {
        this.showReCalculateButton = false;
        this.questions.forEach(question => {
            switch (question.calculationKey) {
                case CalculationKeys.inflation:
                    this.inflation = question.answer;
                    break;
                case CalculationKeys.principal:
                    this.principal = question.answer;
                    break;
                case CalculationKeys.rate:
                    this.rate = question.answer;
                    break;
                case CalculationKeys.years:
                    this.years = question.answer;
                    break;
                default:
                    break;
            }
        });

        //calculations for all other goals
        let applicableRate;
        if (this.considerInflation) {
            applicableRate = (this.rate - this.inflation) / 100;
        } else {
            applicableRate = this.rate / 100;
        }

        let months: number = this.years * 12;
        let compoundFrequency: number = 12;
        let calculationFactor: number = (1 + applicableRate) ** (1 / compoundFrequency);
        let denom: number = calculationFactor - 1;
        let numerator: number = (calculationFactor ** months - 1) * calculationFactor;
        let amount: number = this.principal * numerator / denom;
        this.investedAmount = this.principal * months;

        let graphSIPAmount: number = 0;
        let graphInvestedAmount: number = 0;

        this.SIPAmtData = [];
        this.investedAmtData = [];

        for (let graphTime = 1; graphTime <= this.years * 12; graphTime++) {
            let numerator: number = (calculationFactor ** graphTime - 1) * calculationFactor;
            graphSIPAmount = this.principal * numerator / denom;
            graphInvestedAmount += this.principal;
            if (graphTime % 12 == 0) {
                this.SIPAmtData.push([graphTime / 12, Math.ceil(graphSIPAmount)]);
                this.investedAmtData.push([graphTime / 12, Math.ceil(graphInvestedAmount)]);

            }
        }
        this.amount = Math.ceil(amount);
        this.floor = Math.min(Math.min.apply(Math, this.SIPAmtData), Math.min.apply(Math, this.investedAmtData));
        this.ceiling = Math.max(Math.max.apply(Math, this.SIPAmtData), Math.max.apply(Math, this.investedAmtData));

        this.options.xAxis.categories = this.xCategories;
        this.options.series[0].data = this.SIPAmtData;
        this.options.series[1].data = this.investedAmtData;
    }


    initializeChart() {
        let xToolTip = this.goal.xToolTip;
        let yToolTip = this.goal.yToolTip;
        this.options = {
            title: {text: ''},
            credits: {enabled: false},
            exporting: {enabled: false},
            chart: {
                width: 600,
                height: 230
            },
            plotOptions: {
                line: {
                    dataLabels: {
                        enabled: false
                    }
                }
            },
            xAxis: {
                categories: [],
                title: {
                    text: 'Time(in yrs)',
                    style: {'fontSize': '11px'}
                }
            },
            colors: ["#77ba78", "#BF3235", "black"],
            yAxis: {
                min: this.floor,
                max: this.ceiling,
                title: {
                    text: 'Amount(in INR.)',
                    style: {'fontSize': '11px'}
                },
                labels: {
                    formatter: function () {
                        var val = this.value;
                        if (val >= 10000000) val = (val / 10000000).toFixed(1) + 'Cr';
                        else if (val >= 100000) val = (val / 100000).toFixed(1) + 'Lac';
                        else if (val >= 1000) val = (val / 1000).toFixed(1) + 'k';
                        return val;
                    }
                }
            },
            tooltip: {
                formatter: function () {
                    var valy = this.point.y;
                    if (valy >= 10000000) valy = (valy / 10000000).toFixed(2) + 'Cr';
                    else if (valy >= 100000) valy = (valy / 100000).toFixed(2) + 'Lac';
                    else if (valy >= 1000) valy = (valy / 1000).toFixed(2) + 'k';
                    var valx = this.point.x;
                    return xToolTip + ' <b>' + valx + '</b> ' + yToolTip + ' ' + this.series.name + ' is INR ' + ' <b>' + valy + '</b>';
                    //return val;
                }
            },
            legend: {
                align: 'top',
                verticalAlign: 'top',
                layout: 'horizontal',
                x: 100
            },
            series: [{
                name: 'SIP Value',
                data: []
            }, {
                name: 'Invested Amount',
                data: []
            }]
        };
    }

    initializeForm() {

        this.logger.debug(this.className, "Initializing form!");

        this.calcFormGroup = this.fb.group({
            first: [this.questions[0].answer,
                Validators.compose([Validators.required, NumberValidator.minValue(this.questions[0].min), NumberValidator.maxValue(this.questions[0].max)])],
            second: [this.questions[1].answer,
                Validators.compose([Validators.required, NumberValidator.minValue(this.questions[1].min), NumberValidator.maxValue(this.questions[1].max)])],
            third: [this.questions[2].answer,
                Validators.compose([Validators.required, NumberValidator.minValue(this.questions[2].min), NumberValidator.maxValue(this.questions[2].max)])],
            fourth: [this.questions[3].answer,
                Validators.compose([Validators.required, NumberValidator.minValue(this.questions[3].min), NumberValidator.maxValue(this.questions[3].max)])],
        });

        this.calcFormErrors = {
            first: '',
            second: '',
            third: '',
            fourth: '',
        };

        this.calcFormGroup.valueChanges
            .subscribe(data => {
                if (!this.calcFormGroup) {
                    return;
                } else {
                    this.updateErrorMessages();
                    if (this.calcFormGroup.valid) {
                        this.calculate();
                        this.chart.series[0].setData(this.SIPAmtData);
                        this.chart.series[1].setData(this.investedAmtData);
                    } else {
                        this.logger.debug(this.className, this.calcFormErrors);
                        this.snackBarService.showSnackBar("Please enter valid values!", "OKAY", this.viewContainerRef);
                    }
                }
            });
    }

    updateErrorMessages() {

        const form = this.calcFormGroup;
        this.logger.debug(this.className, "updating message");

        //First Validation
        this.calcFormErrors.first = '';
        let firstControl = form.get('first') as FormControl;
        if (firstControl && firstControl.dirty && !firstControl.valid) {
            const messages = SIPCalcValidationMessages.fields
            for (const key in firstControl.errors) {
                this.calcFormErrors.first += this.prepareErrorMessage(messages, firstControl, key)
            }
        }

        this.questions[0].answer = firstControl.value;

        //Second Validation
        this.calcFormErrors.second = '';
        let secondControl = form.get('second') as FormControl;
        if (secondControl && secondControl.dirty && !secondControl.valid) {
            const messages = SIPCalcValidationMessages.fields
            for (const key in secondControl.errors) {
                this.calcFormErrors.second += this.prepareErrorMessage(messages, secondControl, key)
            }
        }
        this.questions[1].answer = secondControl.value;


        //Third Validation
        this.calcFormErrors.third = '';
        let thirdControl = form.get('third') as FormControl;
        if (thirdControl && thirdControl.dirty && !thirdControl.valid) {
            const messages = SIPCalcValidationMessages.fields
            for (const key in thirdControl.errors) {
                this.calcFormErrors.third += this.prepareErrorMessage(messages, thirdControl, key)
            }
        }

        this.questions[2].answer = thirdControl.value;

        //Fourth Validation
        this.calcFormErrors.fourth = '';
        let fourthControl = form.get('fourth') as FormControl;
        if (fourthControl && fourthControl.dirty && !fourthControl.valid) {
            const messages = SIPCalcValidationMessages.fields
            for (const key in fourthControl.errors) {
                this.calcFormErrors.fourth += this.prepareErrorMessage(messages, fourthControl, key)
            }
        }
        this.questions[3].answer = fourthControl.value;

    }


    prepareErrorMessage(messages: any, control: FormControl, key: string) {
        switch (key) {
            case "minValue":
                return messages[key] + control.errors[key].requiredValue + ' ';
            case "maxValue":
                return messages[key] + control.errors[key].requiredValue + ' ';
            default:
                return messages[key] + ' ';
        }
    }

    seeDisclaimers() {
        let disclaimerText: string[] = [`${disclaimers.calculator_1}`, `${disclaimers.calculator_2}`, `${disclaimers.calculator_3}`, `${disclaimers.calculator_4}`]
        this.dialogService.showDisclaimers(disclaimerText, this.viewContainerRef);
    }

}