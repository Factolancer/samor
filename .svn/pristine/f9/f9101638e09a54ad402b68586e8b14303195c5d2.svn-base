import {Component, OnInit, ViewContainerRef} from '@angular/core';
import { Router } from '@angular/router';
import { Http } from '@angular/http';
import { contentHeaders } from '../headers';
import { routes } from '../app.routes';
import {MdDialogRef, MdDialog} from "@angular/material";
import {FormBuilder, FormGroup, Validators, AbstractControl} from "@angular/forms";
import {EmailValidator} from "../validator";

function passwordValidator(c: AbstractControl) {
    return c.get('confirm_password').value === c.get('enter_password').value
        ? null : {'mismatch': true};
}

@Component({
  selector: 'app-signup',
  templateUrl: './signup.component.html'
  // styleUrls: ['./signup.component.css']
})

export class SignupComponent implements OnInit {

    signUpForm: FormGroup;
    userData: any;

  constructor(public router: Router, public http: Http, public dialogref: MdDialogRef<SignupComponent>,
              private fb: FormBuilder, public dialog: MdDialog) { }

    signup(event, username, password) {
        event.preventDefault();
        let body = JSON.stringify({ username, password });
        this.http.post('http://localhost:3001/users', body, { headers: contentHeaders })
            .subscribe(
                response => {
                    //debugger;
                    localStorage.setItem('id_token', response.json().id_token);
                    this.router.navigate(['/home']);
                },
                error => {
                    alert(error.text());
                    console.log(error.text());
                }
            );
    }

    login(event) {
        event.preventDefault();
        this.router.navigate(['/login']);
    }

    onSignUp(){
        this.userData = this.signUpForm.value
        console.log(this.userData);
        this.dialogref.close();
    }

  ngOnInit() {
      this.signUpForm = this.fb.group({
          mob: ['', Validators.compose([Validators.required, Validators.minLength(10), Validators.pattern('^[0-9]{10}$')])],
          email: ['', Validators.compose([Validators.required, EmailValidator.isValidMailFormat])],
          password: this.fb.group({
              enter_password: ['', Validators.compose([Validators.required])],
              confirm_password: ['', Validators.compose([])]
          }, {validator: Validators.compose([passwordValidator])})
      })
  }

}
