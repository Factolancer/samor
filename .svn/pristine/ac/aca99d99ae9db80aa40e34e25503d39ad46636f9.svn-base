import {Injectable} from "@angular/core";
import {Http, Response, Headers, RequestOptions} from "@angular/http";
import {Observable} from "rxjs/Observable";
import { environment } from '../../environments/environment';


@Injectable()
export class HttpService {

    constructor(private http: Http) {
    }

    baseUrl: string = `${environment.playAPIUrl}/secure`;

    get(path: string): Observable<any> {
        let headers = this.setHeader();
        let options = new RequestOptions({headers: headers})
        return this.http.get(this.baseUrl + path, options)
            .map(this.extractData)
            .catch(this.handleError);
    }

    post(path: string, data: any): Observable<any> {
        let headers = this.setHeader();
        let options = new RequestOptions({headers: headers})
        console.log("In HTTP service POST")
        console.log(this.baseUrl + path)
        console.log(JSON.stringify(data));
        return this.http.post(this.baseUrl + path, data, options)
            .map(this.extractData)
            .catch(this.handleError)
    }

    private setHeader() {
        var token = localStorage.getItem('id_token') ? localStorage.getItem('id_token') : "";
        let headers = new Headers({'Authorization': `Bearer ${token}`});
        return headers;
    }

    private extractData(res: Response) {
        console.log(res);
        let body = res.json();
        let header = res.headers;
        if (header.get("id_token")) {
            localStorage.setItem('id_token', header.get("id_token"));
        }
        return body || {};
    }

    private handleError(error: any) {
        // In a real world app, we might use a remote logging infrastructure
        // We'd also dig deeper into the error to get a better message
        let errMsg = (error.message) ? error.message :
            error.status ? `${error.status} - ${error.statusText}` : 'Server error';
        console.error(errMsg); // log to console instead
        return Observable.throw(errMsg);
    }
}

