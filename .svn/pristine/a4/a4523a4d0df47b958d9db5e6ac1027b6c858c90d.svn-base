import {Injectable} from '@angular/core';
import {Http, Response} from '@angular/http';
import {Observable} from "rxjs/Observable";

import {HttpService} from "../services/http-service.service";

import {PortfolioAssetAllocation} from "./portfolio-asset";
import {AssetAllocationDetails} from "./asset-allocation";
import {AssetClassFund} from "./asset-funds";

@Injectable()
export class DashboardDataService {

    constructor(private https:HttpService, private http:Http) { };
    options:any;
    pf:Object;

    nodeServer:String = "http://localhost:8080/api";

    getPortfolio (): Observable<Object> {
        return this.https.get('/report/summaryReport')
            .map(res => res as PortfolioAssetAllocation)
    }

    getTransaction():Observable<Array<Object>> {
        return this.http.get(this.nodeServer+'/transactions')
            .map(this.extractData)
            .catch(this.handleError);
    }

    getInvestmentDetails():Observable<AssetAllocationDetails>{
        return this.https.get('/report/getAssetAllocationReport')
            .map(res => res as AssetAllocationDetails)
    }
    getInvestedFundDetails():Observable<AssetClassFund>{
        return this.https.get('/report/getAssetClassFundDetails')
            .map(res => res as AssetClassFund)
    }
    getPendingDetails():Observable<Array<Object>>{
        return this.http.get(this.nodeServer+'/pending-details')
            .map(this.extractData)
            .catch(this.handleError);
    }
    getTopPerformers():Observable<Array<Object>>{
        return this.http.get(this.nodeServer+'/top-performers')
            .map(this.extractData)
            .catch(this.handleError);
    }

    private extractData(res: Response) {
        let body = res.json();
        return body|| { };
    }

    private handleError (error: Response | any) {
        // for production, use a remote logging infrastructure
        let errMsg: string;
        if (error instanceof Response) {
            const body = error.json() || '';
            const err = body.error || JSON.stringify(body);
            errMsg = `${error.status} - ${error.statusText || ''} ${err}`;
        } else {
            errMsg = error.message ? error.message : error.toString();
        }
        console.error(errMsg);
        return Observable.throw(errMsg);
    }
    hasInvested():Observable<boolean>{
        return this.http.get(this.nodeServer+'/invested')
            .map(this.extractData)
            .catch(this.handleError);
    }
}
