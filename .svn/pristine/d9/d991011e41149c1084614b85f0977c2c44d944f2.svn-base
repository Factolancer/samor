import {Component, OnInit} from '@angular/core';
import {ActivatedRoute, Params} from "@angular/router";
import {CheckoutService} from "../../core/services/checkout.service";
import {disclaimers} from "../../../properties/discalimers";
import {OrderSummary} from "../models/order-summary";
import {Logger} from "../../core/logger/logger";
import {InvestmentModeEnum} from "../../enum/investment-mode-enum";
import {PaymentStatus} from "../models/payment-status";
import {CartService} from "../../core/services/cart.service";
import {TitleService} from "../../core/services/title.service";

@Component({
    selector: 'app-order',
    templateUrl: 'order.component.html',
    styleUrls: ['../checkout.styles.scss']
})
export class OrderComponent implements OnInit {

    orderId: string;
    orderSummary: OrderSummary;
    disclaimer: string;
    className: string;
    subOrderPaymentStatus: PaymentStatus[];
    investmentMode = InvestmentModeEnum;
    paymentStatusRcvdCount: number;

    constructor(private checkoutService: CheckoutService, private activatedRoute: ActivatedRoute,
                private logger: Logger, private cartService: CartService, private titleService: TitleService) {
        this.className = "OrderComponent";
        this.subOrderPaymentStatus = [];
        this.paymentStatusRcvdCount = 0;
    }

    ngOnInit() {


        this.activatedRoute.params.subscribe((params: Params) => {
            this.orderId = params['orderId'];
            this.titleService.setTitle("order_summary", {id: this.orderId});
            this.checkoutService.getOrderStatus(this.orderId).subscribe(res => {
                this.orderSummary = res as OrderSummary;
                this.orderSummary.subOrderList.forEach((subOrder, index) => {
                    let paymentStatus = new PaymentStatus(subOrder.subOrderId);
                    this.subOrderPaymentStatus.push(paymentStatus);
                    this.checkoutService.getSubOrderStatus(subOrder.subOrderId).subscribe(res => {
                        let serverRes = res as PaymentStatus;
                        this.paymentStatusRcvdCount += 1;
                        this.subOrderPaymentStatus[index].status = serverRes.status;
                        this.subOrderPaymentStatus[index].statusCode = serverRes.statusCode;
                        /*cart clearing logic*/
                        if (this.subOrderPaymentStatus[index].statusCode == 2 ||
                            this.subOrderPaymentStatus[index].statusCode == 3 ||
                            this.subOrderPaymentStatus[index].statusCode == 4 ||
                            this.subOrderPaymentStatus[index].statusCode == 6) {
                            this.cartService.removeFundById(subOrder.soptrfnum.toString());
                        }

                        /*order mail sending logic*/
                        if(this.paymentStatusRcvdCount==this.subOrderPaymentStatus.length){
                            this.logger.info(this.className, "-->sending ", this.paymentStatusRcvdCount, this.subOrderPaymentStatus.length)

                            this.checkoutService.sendOrderMail(this.orderSummary.orderId).subscribe(res =>{
                                    this.logger.info(this.className,"--->sending mail succes", res);
                            },
                            err => {this.logger.info(this.className,"--->sending mail failed", err);}
                            )
                        } else{
                            this.logger.info(this.className, "-->not yet sent", this.paymentStatusRcvdCount, this.subOrderPaymentStatus.length)
                        }
                    });
                })
            });
        });

        this.disclaimer = `${disclaimers.order}`
    }

    print() {
        window.print();
    }
}
