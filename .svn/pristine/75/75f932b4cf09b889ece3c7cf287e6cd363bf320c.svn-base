import {Component, OnInit, AfterViewInit, Input, ViewChild, ViewChildren} from '@angular/core';
import {Subscription, Observable} from "rxjs";

import {User} from '../models/user';
import {HttpService} from "../services/http-service.service";
import {BankSearchService} from './sections/bank-section/search.service';
import {UserService} from "./user.service";
import {Http, Headers, Jsonp} from "@angular/http";
import {KYCService} from "./kyc.service";
import {Router} from "@angular/router";

@Component({
    selector: 'app-registration',
    templateUrl: './registration.component.html',
    styleUrls: ['./registration.styles.scss'],
    providers: [BankSearchService, UserService, KYCService]
})
export class RegistrationComponent implements OnInit {

    // resultsubscription: Subscription
    user: User;
    usersubscription: Subscription;

    constructor(public http: HttpService, public userService: UserService, private kycService: KYCService, public router: Router) {

        // this.resultsubscription = this.searchService.searchResults.subscribe(
        //     result => {
        //         this.bankList = result.banks;
        //     }
        // );

        this.usersubscription = this.userService.currentUser.subscribe(
            result => {
                this.user = result
            }
        )
    }

    ngOnInit() { }

    indexBanks() {
        this.http.get("/indexBanks").subscribe(output => {
            console.log("details indexed");
        });
    }

    showKyc: Observable<any>;
    uatUrl = "https://eiscuat1.camsonline.com/ekycuat3/eKYCVal_Aadhar.aspx";
    returnUrl = "http://localhost/";
    pan = "ALDPN3048F";
    aadhar = "321463430696";// "386739705452";
    appID = "fincash";
    userId = "UECH_SHEP";
    password = "HzK6$g3";
    intermediaryId = "B";
    kyc_data = this.pan + "|pareshnagore@gmail.com|7032909303|fincash|" + this.userId + "|" + this.password + "|B|MFKYC" //9952302214

    public headers = new Headers();

    postData = {
        Aadhar: this.aadhar,
        url: this.returnUrl
        //kyc_data: this.pan + "||9952302214|fincash|" + this.userId + "|" + this.password + "|B"
    }

    queryString = "&Aadhar=" + this.aadhar + "&url=" + this.returnUrl + "&kyc_data=" + this.kyc_data;

    test(){
        this.router.navigateByUrl("http://www.google.com")
    }
    CheckKYC(){

        // this.showKyc = this.kycService.check();

        /*this.jsonp
            .get(this.uatUrl + this.queryString)
            .map(response => {
                console.log(response);
            })*/


        /*this.headers.append("Access-Control-Allow-Origin", '*');
        this.headers.append("Access-Control-Allow-Methods", 'GET, POST, PATCH, PUT, DELETE, OPTIONS');
        this.headers.append("Access-Control-Allow-Headers", 'Origin, Content-Type, X-Auth-Token');
        this.headers.append('Authorization', 'Basic ' + btoa('userId:password'));*/
        this.http.post('/getKycBasic', this.postData/*, {headers: this.headers, withCredentials: true}*/)
            .subscribe(result => {
                console.log(result);
            })
    }

    // @ViewChild('basicForm') currentBasicForm: NgForm;
    // @ViewChild('kycForm') currentKycForm: NgForm;
    // @ViewChild('bankForm') currentBankForm: NgForm;
    //
    //
    // ngAfterViewChecked() {
    //   this.basicformChanged();
    //   this.kycformChanged();
    //   this.bankformChanged();
    //   console.log("In after view checked");
    // }
    //
    // basicformChanged() {
    //   // if (this.currentBasicForm === this.basicForm) {console.log("current basic-section = basic-section"); return; }
    //   this.basicForm = this.currentBasicForm;
    //   if (this.basicForm) {
    //     console.log("in basic-section form");
    //     this.basicForm.valueChanges
    //         .subscribe(data => this.onValueChanged(data));
    //   }
    // }
    // kycformChanged() {
    //   if (this.currentKycForm === this.kycForm) { return; }
    //   this.kycForm = this.currentKycForm;
    //   if (this.kycForm) {
    //     this.kycForm.valueChanges
    //         .subscribe(data => this.onValueChanged(data));
    //   }
    // }
    // bankformChanged() {
    //   if (this.currentBankForm === this.bankForm) { return; }
    //   this.bankForm = this.currentBankForm;
    //   if (this.kycForm) {
    //     this.kycForm.valueChanges
    //         .subscribe(data => this.onValueChanged(data));
    //   }
    // }
    //
    // onValueChanged(data?: any) {
    //   if (!this.basicForm || !this.kycForm || !this.bankForm) { return; }
    //   const basicform = this.basicForm.form;
    //   const kycform = this.kycForm.form;
    //   const bankform = this.bankForm.form;
    //
    //   for (const field in this.formErrors) {
    //     // clear previous error message (if any)
    //     this.formErrors[field] = '';
    //     const basiccontrol = basicform.get(field);
    //     const kyccontrol = kycform.get(field);
    //     const bankcontrol = bankform.get(field);
    //
    //     if (basiccontrol && basiccontrol.dirty && !basiccontrol.valid) {
    //       console.log("basic-section dirty & not valid");
    //       const messages = this.validationMessages[field];
    //       for (const key in basiccontrol.errors) {
    //         this.formErrors[field] += messages[key] + ' ';
    //       }
    //       console.log(this.formErrors['pan']);
    //     }
    //     if (kyccontrol && kyccontrol.dirty && !kyccontrol.valid){
    //       const messages = this.validationMessages[field];
    //       for (const key in kyccontrol.errors) {
    //         this.formErrors[field] += messages[key] + ' ';
    //       }
    //     }
    //     if (bankcontrol && bankcontrol.dirty && !bankcontrol.valid){
    //       const messages = this.validationMessages[field];
    //       for (const key in bankcontrol.errors) {
    //         this.formErrors[field] += messages[key] + ' ';
    //       }
    //     }
    //   }
    // }
    //
    // formErrors = {
    //   'name': '',
    //   'pan': '',
    //   'mobile':'',
    //   'email': '',
    //   'dob':''
    // };
    //
    // validationMessages = {
    //   'name': {
    //     'required':      'Name is required.',
    //     'minlength':     'Name must be at least 4 characters long.',
    //     'maxlength':     'Name cannot be more than 24 characters long.',
    //     'forbiddenName': 'Someone named "Bob" cannot be a hero.'
    //   },
    //   'pan': {
    //     'required': 'PAN number is required.',
    //     'minlength': 'PAN number is incorrect, please enter valid PAN number',
    //     'maxlength': 'PAN number is incorrect, please enter valid PAN number'
    //   }
    // };

}
