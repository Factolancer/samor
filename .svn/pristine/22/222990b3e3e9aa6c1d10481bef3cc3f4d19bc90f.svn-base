import {Component, OnInit, ViewContainerRef, Inject, OnDestroy} from "@angular/core";
import {ActivatedRoute, Router} from "@angular/router";
import {CheckoutService} from "../../core/services/checkout.service";
import {InvestmentModeEnum} from "../../enum/investment-mode-enum";
import {CheckoutFund} from "../models/checkout-fund";
import {Checkout} from "../models/checkout";
import {SnackBarService} from "../../core/services/snack-bar.service";
import {disclaimers} from "../../../properties/discalimers";
import html2canvas from "html2canvas";
import {Logger} from "../../core/logger/logger";
import {SummaryUserInfo} from "../models/summary-user-info";
import {OrderSummary} from "../models/order-summary";
import {IAppConfig, APP_CONFIG} from "../../../environments/environment";
import {PaymentObject} from "../models/payment-object";
import {Location, PlatformLocation} from "@angular/common";
import {URLAccessGuard} from "../../core/guards/urlAccess.guard";
import {Http} from "@angular/http";
import {TitleService} from "../../core/services/title.service";
import {LoginService} from "../../core/services/login.service";
import {MdDialog, MdDialogConfig} from "@angular/material";
import {LoadingDialogComponent} from "../../shared/loading-dialog.component";
import {HeaderService} from "../../core/services/header.service";
import {Observable} from "rxjs/Observable";
import "rxjs/add/operator/take";
import "rxjs/add/observable/timer";
import {isNullOrUndefined} from "util";
import {BseBank} from "../models/bse-bank";
import {Subscription} from "rxjs/Subscription";
import {UtilityService} from "../../core/services/utility.service";
import {CheckoutLZeroLOne} from "../checkout-l-zero-l-one";

@Component({
    selector: 'app-summary',
    templateUrl: './summary.component.html',
    styleUrls: ['../checkout.styles.scss']
})
export class SummaryComponent implements OnInit, OnDestroy {

    checkoutData: Checkout;
    sipFunds: CheckoutFund[];
    lumpsumFunds: CheckoutFund[];
    agreementSelected: boolean;
    disclaimerList: string[];
    additionalTextList: string[];
    sipDisclaimerText: string;
    bankDetailsList: BseBank[];
    className: string;
    summaryUserInfo: SummaryUserInfo;
    loadingDialogRef: any;
    hideDetails: boolean;
    additionalPurchaseExists: boolean;
    showFullDisclaimer: boolean;
    closingDialogSubscription: Subscription;
    isLZero:boolean;
    isLOne:boolean;
    cutOffTime:string;
    showPaymentInfo:boolean;

    constructor(private route: ActivatedRoute, private router: Router, private logger: Logger,
                private checkoutService: CheckoutService, private http: Http,
                private viewContainerRef: ViewContainerRef, private snackBarService: SnackBarService,
                @Inject(APP_CONFIG) private config: IAppConfig, private location: Location,
                private platformLocation: PlatformLocation, private urlAccessGuard: URLAccessGuard,
                private headerService: HeaderService, private utilityService: UtilityService,
                private titleService: TitleService, private loginService: LoginService, private dialog: MdDialog) {
        this.agreementSelected = false;
        this.className = "SummaryComponent";
        this.sipDisclaimerText = `${disclaimers.checkout_sip}`;
        this.hideDetails = false;
        this.showFullDisclaimer = false;
        this.isLOne = false;
        this.isLZero = false;
        this.showPaymentInfo = false;
    }

    ngOnInit() {
        this.titleService.setTitle("summary");
        this.sipFunds = [];
        this.lumpsumFunds = [];
        this.checkoutData = this.checkoutService.checkoutData;

        this.route.data.forEach((data: { userInfo: SummaryUserInfo }) => {
            this.summaryUserInfo = data.userInfo;
        });


        this.checkoutData.fundsData.forEach(fund => {
            if (fund.selectedInvestmentMode == InvestmentModeEnum[InvestmentModeEnum.SIP]) {
                this.sipFunds.push(fund);
            } else {
                this.lumpsumFunds.push(fund);
            }
        });
        let summaryData = this.checkoutService.prepareSummary("");
        this.checkoutService.checkLZeroLOne(summaryData).subscribe(data => {
            let lZeroLOneDetailsFunds = data['lZeroLOneList'] as CheckoutLZeroLOne[];
            this.checkLZeroLOne(lZeroLOneDetailsFunds);
            this.setBSEBankDetails();
        });

        this.checkAdditionalPurchase();
        this.disclaimerList = [`${disclaimers.summary_1}`, `${disclaimers.summary_2}`, `${disclaimers.summary_3}`, `${disclaimers.summary_4}`, `${disclaimers.summary_5}`]
        this.additionalTextList = ["", "", "read more", "", ""];
    }

    checkLZeroLOne(checkoutLZeroLOneFunds:CheckoutLZeroLOne[]){
        for(let fund of checkoutLZeroLOneFunds){
            if((!isNullOrUndefined(fund.isLOne) && fund.isLOne)){
                this.isLOne = true;
            }
            if(!isNullOrUndefined(fund.isLZero) && fund.isLZero){
                this.isLZero = true;
            }
        }
        if(this.isLOne || this.isLZero){
            this.setCutOff(checkoutLZeroLOneFunds);
        }
    }

    setCutOff(checkoutLZeroLOneFunds:CheckoutLZeroLOne[]){

        let cutOffTime = "";
        for(let fund of checkoutLZeroLOneFunds){
            if(this.isLZero){
                if(fund.isLZero){
                    cutOffTime = fund.lOneLZeroDetails.fundsCutOffTime;
                }
            } else{
                if(fund.isLOne){
                    cutOffTime = fund.lOneLZeroDetails.fundsCutOffTime;
                }
            }
        }
        let timeArray = cutOffTime.split(":");
        let amPm = "AM";
        if(+timeArray[0] > 12){
            this.cutOffTime = (+timeArray[0] - 12) + "";
            amPm = "PM";
        } else{
            this.cutOffTime = timeArray[0]
        }
        this.cutOffTime += ":"+timeArray[1] + " " + amPm;
    }

    setBSEBankDetails() {
        let bankType = this.checkoutData.selectedBank.bankType;
        if (isNullOrUndefined(bankType) || bankType != 'DIRECT' || this.isLZero || this.isLOne ) {
            if((!isNullOrUndefined(bankType) || bankType == 'DIRECT') && this.checkoutData.totalInvestmentAmount < 50000){
                this.showFullDisclaimer = true;
            } else{
                this.bankDetailsList = this.checkoutData.bseBankDetails;
                this.showPaymentInfo = true;
            }
        } else {
            this.showFullDisclaimer = true;
        }
    }

    checkAdditionalPurchase() {
        for (let fund of this.lumpsumFunds) {
            if (!isNullOrUndefined(fund.folioNo) && fund.folioNo.length > 0) {
                this.additionalPurchaseExists = true;
            }
        }
    }

    proceed() {
        if (this.agreementSelected) {
            this.utilityService.scrollToTop();
            let userObject = this.loginService.getUserObject();
            this.logger.debug(this.className, userObject);
            this.headerService.hideHeader();
            this.headerService.hideFooter();
            this.hideDetails = true;
            let timerSubscription = Observable.timer(1000).take(1).subscribe(val => {
                html2canvas(document.body, {svgRendering: true}).then(canvas => {
                    this.hideDetails = false;
                    this.headerService.showHeader();
                    this.headerService.showFooter();
                    timerSubscription.unsubscribe();
                    this.showLoadingDialog();
                    let base64String = canvas.toDataURL("image/png");
                    this.http.post(this.config.snapshotApi, {
                        id: userObject['userid'],
                        type: 'order',
                        snapshot: base64String
                    }).subscribe(response => {
                        let imageObject = response.json();

                        if (imageObject && imageObject['success']) {
                            this.checkoutService.invest(imageObject['uploadfile']).subscribe(orderResponse => {
                                let orderSummary = orderResponse  as OrderSummary;
                                let errorFound = false;

                                orderSummary.subOrderList.forEach(subOrder => {
                                    if (subOrder.orderProcessed == 1) {
                                        this.checkoutData.fundsData.forEach(fund => {
                                            if (fund.selectedSoptRfnum == subOrder.soptrfnum && fund.selectedInvestmentMode == subOrder.investmentMode) {
                                                fund.orderPlaced = false;
                                            }
                                        });
                                        errorFound = true;
                                    } else {
                                        this.checkoutData.fundsData.forEach(fund => {
                                            if (fund.selectedSoptRfnum == subOrder.soptrfnum && fund.selectedInvestmentMode == subOrder.investmentMode) {
                                                fund.orderPlaced = true;
                                            }
                                        })
                                    }
                                });

                                if (errorFound) {
                                    this.checkoutService.errorCheckoutData = this.checkoutData.fundsData;
                                    this.urlAccessGuard.allow = true;
                                    if(this.loadingDialogRef){
                                        this.closingDialogSubscription = this.loadingDialogRef.afterClosed().subscribe(value => {
                                            this.router.navigate(['confirm', orderSummary.orderId], {relativeTo: this.route.parent});
                                        })
                                        this.loadingDialogRef.close();
                                    }
                                }  else if(!isNullOrUndefined(orderSummary.paymentRedirect) && orderSummary.paymentRedirect){
                                    this.logger.debug(this.className, this.route);
                                    let paymentUrl = this.platformLocation['location'].origin + this.config.paymentFallbackUrl;
                                    this.checkoutService.getPaymentLink(new PaymentObject(orderSummary.orderId, paymentUrl)).subscribe(paymentResponse => {
                                        let responsePaymentObj = paymentResponse as PaymentObject;
                                        this.logger.debug(this.className, responsePaymentObj);
                                        if(this.loadingDialogRef){
                                            this.closingDialogSubscription = this.loadingDialogRef.afterClosed().subscribe(value => {
                                                this.utilityService.redirectionByWindow(responsePaymentObj.bseUrl);
                                            });
                                            this.loadingDialogRef.close();
                                        }
                                    }, error => {
                                        this.snackBarService.showSnackBar("Error Occurred, Please Refresh", "Okay", this.viewContainerRef);
                                        this.closeLoadingDialog();
                                    })
                                } else {
                                    if(this.loadingDialogRef) {
                                        this.closingDialogSubscription = this.loadingDialogRef.afterClosed().subscribe(value => {
                                            this.router.navigate(['order', orderSummary.orderId], {relativeTo: this.route.parent});
                                        });
                                        this.loadingDialogRef.close();
                                    }
                                }
                            }, error => {
                                this.snackBarService.showSnackBar("Please try again later.", "Okay", this.viewContainerRef);
                            })
                        } else {
                            this.snackBarService.showSnackBar("Please try again later.", "Okay", this.viewContainerRef);
                            this.closeLoadingDialog();
                        }
                    }, error => {
                        this.snackBarService.showSnackBar("Please try again later.", "Okay", this.viewContainerRef);
                        this.closeLoadingDialog();
                    })
                });
            });
        }
        else {
            this.snackBarService.showSnackBar("Please accept the terms and conditions", "Okay", this.viewContainerRef);
        }


    }

    back() {
        this.urlAccessGuard.allow = true;
        this.router.navigate(['init'], {relativeTo: this.route.parent});

    }

    goToTermsConditions() {
        this.utilityService.openByWindow("/static/terms-conditions");
    }

    showLoadingDialog() {
        let config = new MdDialogConfig();
        let device = this.headerService.deviceType();
        if (device === 'xs' || device === 'sm') {
            config.width = '100%';
        } else {
            config.width = '25vw';
        }
        config.disableClose = true;
        config.viewContainerRef = this.viewContainerRef;
        let loadingConfig = {
            text: "Processing..."
        };
        this.loadingDialogRef = this.dialog.open(LoadingDialogComponent, config);
        this.loadingDialogRef.componentInstance.config = loadingConfig;

    }

    closeLoadingDialog(){
        if (this.loadingDialogRef){
            this.loadingDialogRef.close();
        }
    }

    checkboxAgreement() {
        if (this.agreementSelected) {
            this.checkoutService.getSummaryInfo().subscribe(output => {
                this.summaryUserInfo = output as SummaryUserInfo;
            }, error => {
                this.snackBarService.showSnackBar("Error Occurred, Please Refresh", "Okay", this.viewContainerRef);
            })
        }
    }


    ngOnDestroy() {
        if (this.closingDialogSubscription) {
            this.logger.debug("Closing processing dialog!");
            this.closingDialogSubscription.unsubscribe()
        }
    }
}