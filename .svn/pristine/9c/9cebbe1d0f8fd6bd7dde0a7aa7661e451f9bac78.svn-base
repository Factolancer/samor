/*
'use strict';

var mongoose = require('mongoose');
var Schema = mongoose.Schema;
var crypto = require('crypto');
var authTypes = ['github', 'twitter', 'facebook', 'google'];


/!**
 * A Validation function for local strategy properties
 *!/
var validateLocalStrategyProperty = function (property) {
  return ((this.provider !== 'local' && !this.updated_at) || property.length);
};

/!*Login Activities : This will save latest 10 login activities*!/
var LoginActivitiesSchema = new Schema({
  browser: {
    type: String
  },
  ipAddress: {
    type: String
  },
  message: {
    type: String,
    required: true
  },
  archiveId: {
    type: Schema.Types.ObjectId,
    ref: 'LoginAttemptsArchive'
  },
  timestamp: {
    type: Date,
    required: true
  }
});

/!*User*!/
var UserSchema = new Schema({
  firstName: {
    type: String,
    trim: true,
    default: '',
    validate: [validateLocalStrategyProperty, 'Please fill in your first name']
  },
  lastName: {
    type: String,
    trim: true,
    default: '',
    validate: [validateLocalStrategyProperty, 'Please fill in your last name']
  },
  email: {type: String, lowercase: true},
  mobile_no: {
    type: String,
    trim: true,
    validate: [validateLocalStrategyProperty, 'Please fill in your mobile no.']
  },
  role: {
    group: [{
      type: String,
      enum: ['authenticated', 'admin', 'marketing', 'accounts', 'client']
    }],
    _permissions: [{
      type: Schema.Types.ObjectId,
      ref: 'Permission'
    }]
  },
  subRole: {
    type: String,
    enum: ['branch_manager', 'branch_user','']
  },
  mappedUsers: [
    {
      type: Schema.Types.ObjectId,
      ref: 'User'
    }
  ],
  hashedPassword: String,
  resetPasswordToken: String,
  resetPasswordExpires: Date,
  provider: String,
  salt: String,
  facebook: {},
  twitter: {},
  google: {},
  github: {},
  loginActivity: [LoginActivitiesSchema],
  active: {
    type: Number,
    default: 1 /!*active:1, Inactive:0, Banned:2*!/
  },
  created_by: {
    type: Schema.Types.ObjectId,
    ref: 'User'
  },
  created_at: {
    type: Date,
    default: Date.now
  },
  updated_by: {
    type: Schema.Types.ObjectId,
    ref: 'User'
  },
  updated_at: {
    type: Date
  }
});

/!**
 * Virtuals
 *!/
UserSchema
  .virtual('password')
  .set(function (password) {
    this._password = password;
    this.salt = this.makeSalt();
    this.hashedPassword = this.encryptPassword(password);
  })
  .get(function () {
    return this._password;
  });

// Public profile information
UserSchema
  .virtual('profile')
  .get(function () {
    return {
      'name': this.firstName,
      'role': this.role
    };
  });

// User full name
UserSchema
  .virtual('name')
  .get(function () {
    return this.firstName + ' ' + this.lastName;
  });

// Non-sensitive info we'll be putting in the token
UserSchema
  .virtual('token')
  .get(function () {
    return {
      '_id': this._id,
      'role': this.role.group[this.role.group.length - 1]
    };
  });

/!**
 * Validations
 *!/

// Validate empty email
UserSchema
  .path('email')
  .validate(function (email) {
    if (authTypes.indexOf(this.provider) !== -1) return true;
    return email.length;
  }, 'Email cannot be blank');


// Validate phone
UserSchema.path('mobile_no').validate(function (value) {
  return /^\d{10}$/.test(value);
}, 'Please enter valid mobile no');


// Validate empty password
UserSchema
  .path('hashedPassword')
  .validate(function (hashedPassword) {
    if (authTypes.indexOf(this.provider) !== -1) return true;
    return hashedPassword.length;
  }, 'Password cannot be blank');

// Validate email is not taken
UserSchema
  .path('email')
  .validate(function (value, respond) {
    var self = this;
    this.constructor.findOne({email: value}, function (err, user) {
      if (err) throw err;
      if (user) {
        if (self.id === user.id) return respond(true);
        return respond(false);
      }
      respond(true);
    });
  }, 'The specified email address is already in use.');

var validatePresenceOf = function (value) {
  return value && value.length;
};

/!**
 * Pre-save hook
 *!/
UserSchema
  .pre('save', function (next) {
    if (!this.isNew) return next();

    if (!validatePresenceOf(this.hashedPassword) && authTypes.indexOf(this.provider) === -1)
      next(new Error('Invalid password'));
    else
      next();
  });

/!**
 * Methods
 *!/
UserSchema.methods = {
  /!**
   * Authenticate - check if the passwords are the same
   *
   * @param {String} plainText
   * @return {Boolean}
   * @api public
   *!/
  authenticate: function (plainText) {
    return this.encryptPassword(plainText) === this.hashedPassword;
  },

  /!**
   * Make salt
   *
   * @return {String}
   * @api public
   *!/
  makeSalt: function () {
    return crypto.randomBytes(16).toString('base64');
  },

  /!**
   * Encrypt password
   *
   * @param {String} password
   * @return {String}
   * @api public
   *!/
  encryptPassword: function (password) {
    if (!password || !this.salt) return '';
    var salt = new Buffer(this.salt, 'base64');
    return crypto.pbkdf2Sync(password, salt, 10000, 64).toString('base64');
  }
};

UserSchema.set('toJSON', {virtuals: true});
module.exports = mongoose.model('User', UserSchema);
*/
