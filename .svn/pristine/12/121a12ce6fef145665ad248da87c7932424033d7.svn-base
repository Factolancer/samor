import {Injectable} from "@angular/core";
import {HttpService} from "../core/services/http-service.service";
import {Logger} from "../core/logger/logger";
import {Redemption} from "./models/redemption";
import {RedemptionBank} from "./models/redemption-bank";
import {RedemptionNominee} from "./models/redemption-nominee";
import {BehaviorSubject} from "rxjs/BehaviorSubject";
import {Observable} from "rxjs/Observable";
import {RedemptionFund} from "./models/redemption-fund";
import {RedemptionSummary} from "./models/redemption-summary";
import {CartService} from "../core/services/cart.service";

@Injectable()
export class RedemptionService {
    className: string;
    redemptionData: BehaviorSubject<Redemption>;
    redemptionObservable: Observable<Redemption>;
    errorRedemptionData: RedemptionFund[];

    constructor(private httpService: HttpService, private logger: Logger, private cartService: CartService) {
        this.className = "RedemptionService";
        let redemption = new Redemption("", [], [], [], new RedemptionBank(1, "", "", "", ""), new RedemptionNominee("", "", ""), 0);
        this.redemptionData = new BehaviorSubject<Redemption>(redemption);
        this.redemptionObservable = this.redemptionData as Observable<Redemption>;
    }

    getRedemptionAutoCompleteData(term: string) {
        return this.httpService.securePost("/redeem/getRedeemSuggestion", {term: term});
    }

    getRedemptionData() {
        // return new Redemption("", [], [], [], new RedemptionBank(1, "HDFC Bank", "Mahape", "22", "HDFC0002334"), new RedemptionNominee("", "", ""), 0);
        return this.httpService.securePost("/checkout/getRedemptionDataSummary", {"cartId": this.cartService.getCartSubjectState().id})
            .subscribe(value => {this.redemptionData.next(value)})
    }

    postCheckoutData() {
        return this.httpService.securePost("/checkout/saveRedemptionData", {"cartId": this.cartService.getCartSubjectState().id, "redemption": this.redemptionData.getValue()})
    }

    invest(imagePath: string) {
        return this.httpService.securePost("/checkout/invest", this.prepareSummary(imagePath));
    }

    prepareSummary(imagePath: string): any {
        let summaryFunds: RedemptionFund[] = [];

        this.redemptionData.getValue().fundsData.forEach(fund => {
            summaryFunds.push(new RedemptionFund(fund.fund, +fund.soptRfnum, fund.plan, fund.option, fund.selectedRedemptionMode,
                fund.selectedAWPFrequency, +fund.selectedCreditDate, +fund.noOfInstallment, +fund.amount, fund.swpDatesList,
                fund.swpFrequencyList, fund.orderPlaced));
        });
        return new RedemptionSummary(summaryFunds, this.redemptionData.getValue().selectedBank.id,
            this.redemptionData.getValue().totalRedemptionAmount, imagePath);
    }

    getSummaryInfo() {
        return this.httpService.secureGet("/checkout/getSummaryInfo");
    }
}