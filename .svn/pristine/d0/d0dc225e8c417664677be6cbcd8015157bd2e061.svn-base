import {
    Component, OnInit, style, state, animate, transition, trigger, OnDestroy, Input, Output,
    EventEmitter
} from '@angular/core';
import {NgForm, FormGroup, Validators, FormControl, FormBuilder, Validator, FormControlName} from '@angular/forms';
import {Subscription} from "rxjs";

import {User} from "../../../models/user";
import {UserService} from '../../userdata.service';
import {HttpService} from "../../../services/http-service.service";
import {Country} from "../../../countries";
import {Heading} from "../../constants/headings";
import {Income} from "../../constants/incomerange";
import {Occupation} from "../../constants/occupation";
import {ValidationMessages} from "../../constants/validationmessages";
import {ActivatedRoute} from "@angular/router";
import {LookUpService} from "../../../services/lookup.service";
import {Logger} from "../../../shared/logger/logger";

@Component({
    selector: 'other-section',
    templateUrl: './other-section.component.html',
    styleUrls: ['../../registration.styles.scss'],
    providers: [LookUpService],
    animations: [
        trigger('ShowHide', [
            state('show', style({opacity: '1', height: '*', visibility: 'visible'})),
            state('hide', style({opacity: '0', height: '0px', visibility: 'collapse'})),
            transition('show <=> hide', [
                animate('500ms ease-in-out')
            ])
        ])
    ]
})
export class OtherSectionComponent implements OnInit, OnDestroy {

    otherForm: FormGroup;
    public countries: any
    public heading = Heading;
    public incomerange: any
    public occupations: any

    @Input() state: string = 'hide';
    othersaved = false;
    @Input() othercollapsed = true;
    @Output() makeVisible: EventEmitter<boolean>= new EventEmitter();
    isNRI = false;
    indiantaxpayer = 'Yes';

    user: User
    usersubscription: Subscription;

    validationMessages = ValidationMessages;
    className: string
    constructor(private fb: FormBuilder, public userService: UserService, public http: HttpService, private route: ActivatedRoute,
                public lookupService: LookUpService, private logger: Logger) {
        this.className = "FatcaSection";
    }

    ngOnInit() {
        /*this.route.data.forEach((data: {user: User}) => {
            this.user = data.user;
        });*/

        this.lookupService.getByGroup("OCCUPATION").subscribe(response =>{
            this.occupations = response
        })
        this.lookupService.getByGroup("COUNTRY").subscribe(response => {
            this.countries = response
        })
        this.lookupService.getByGroup("INCOMESLAB").subscribe(response => {
            this.incomerange = response
        })
        this.usersubscription = this.userService.currentUser.subscribe(
            result => {
                this.logger.debug(this.className,result);
                this.user = result;
                this.buildform(this.user);
            }
        )
        this.buildform(this.user);
    }

    buildform(result): void {
        this.otherForm = this.fb.group({
            income: ['', Validators.compose([Validators.required])],
            occupation: ['', Validators.required],
            nationality: ['India', Validators.required],
            birthCountry: ['India', Validators.compose([Validators.required])],
            birthCity: ['', Validators.required],
            isIndianTaxPayer: ['Yes'],
            taxCountry: [''],
            tin: [''],
            politicallyExposed: ['No'],
            politicallyRelated: ['No'],
        });

        this.otherForm.statusChanges.subscribe(data => this.onValueChanged(data));
        // this.onValueChanged();
    }

    onValueChanged(data?: any) {
        if (!this.otherForm) {
            return;
        }
        const otherform = this.otherForm;
        if (otherform.pristine) {
            return;
        }
        if (!otherform.dirty) {
            return;
        }
        for (const field in this.formErrors) {
            // clear previous error message (if any)
            this.formErrors[field] = '';
            const control = otherform.controls[field];
            console.log(control + typeof control);
            if (!control.valid && control.touched) {
                console.log(control.errors);
                const messages = this.validationMessages[field];
                for (const key in control.errors) {
                    this.formErrors[field] += messages[key] + ' ';
                }
            }
        }

    }

    formErrors = {
        "birthCity": ''
    };

    onOtherSubmit() {
        console.log("we are in other section compoenent")
        this.othersaved = true;
        this.otherForm.controls['isIndianTaxPayer'].setValue(this.indiantaxpayer)
        this.userService.updateOtherData(this.otherForm.value);
        //this.user.Other = this.otherForm.value;
        /*if (this.otherForm.controls['isIndianTaxPayer'].value == 'Yes') {
         this.user.Other.taxCountry = 'India';
         }
         else {
         this.user.Other.taxCountry = this.otherForm.controls['taxCountry'].value;
         }
         if (this.otherForm.controls['investorType'].value == 'Resident Indian') {
         this.user.Other.country = 'India';
         }
         else {
         this.user.Other.country = this.otherForm.controls['country'].value;
         }*/
        //console.log(this.user);
        this.toggleOther();
        this.makeVisible.emit();
    }

    toggleOther() {
        if (this.othercollapsed == true) this.othercollapsed = false;
        else this.othercollapsed = true;

        this.state = (this.state === 'hide' ? 'show' : 'hide')
    }

    ngOnDestroy() {

    }
}
