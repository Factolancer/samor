import {Component, OnInit, style, state, animate, transition, trigger, Input} from '@angular/core';
import {NgForm, FormGroup, Validators, FormControl, FormBuilder, Validator, FormControlName} from '@angular/forms';
import {Subscription, Observable} from "rxjs";

import {EmailValidator} from '../../../validator';
import {User} from "../../../models/user";
import {UserService} from '../../userdata.service';
import {Country} from '../../../countries';
import {ValidationMessages} from "../../constants/validationmessages";
import {Heading} from "../../constants/headings";
import {ActivatedRoute} from "@angular/router";


@Component({
    selector: 'basic-section',
    templateUrl: './basic-section.component.html',
    styleUrls: ['../../registration.styles.scss'],
    animations: [
        trigger('ShowHide', [
            state('show', style({opacity: '1', height: '*', visibility: 'visible'})),
            state('hide', style({opacity: '0', height: '0px', visibility: 'collapse'})),
            transition('show <=> hide', [
                animate('500ms ease-in-out')
            ])
        ])
    ]
})

export class BasicSection implements OnInit {

    basicForm: FormGroup;
    user: User;
    usersubscription: Subscription;

    basicsaved = false;
    basiccollapsed = false;
    state: string = 'show';
    public heading = Heading;

    validationMessages = ValidationMessages;

    constructor(private fb: FormBuilder, public userService: UserService, public route: ActivatedRoute) {
        /*this.usersubscription =  this.userService.currentUser.subscribe(
            result => {
                console.log("In Init of Basic ");
                console.log(result)
                this.user = result
            }
        )*/

        this.user = new User({firstName: '', lastName: '',  pan: '', panName: '', fatherName: '', motherName: '', contact: {}, dob: '', gender: '' },
            {currentAddress: {}, permanentAddress: {}},
            {
                holderName: '', accountType: 'Savings Account',
                bank: {bankName: '', IFSC: '', city: '', state: '', district: '', branch: ''},
                accountNumber: ''
            },
            {
                income: '',
                occupation: '',
                nationality: 'India',
                birthCountry: 'India',
                birthCity: '',
                taxCountry: 'India',
                politicallyExposed: 'No',
                politicallyRelated: 'No'
            },
            {}
        );
    }

    ngOnInit() {

        /*this.route.data.forEach((data: {user: User}) => {
            this.user = data.user;
        });*/
        this.buildform();
    }

    buildform(): void{
        this.basicForm = this.fb.group({
            pan: ['', Validators.compose([Validators.required, Validators.pattern('[a-zA-Z]{5}\\d{4}[a-zA-Z]{1}')])],
            panName: ['', Validators.compose([Validators.required, Validators.pattern('^[A-Za-z .\\-]+$')])],
            contact: this.fb.group({
                mob: ['', Validators.compose([Validators.required, Validators.minLength(10), Validators.pattern('^[0-9]{10}$')])],
                email: ['', Validators.compose([Validators.required, EmailValidator.isValidMailFormat])],
                tel: ['', Validators.compose([Validators.pattern('^[0-9]{10}$')])],
                fax: ['', Validators.compose([Validators.pattern('^[0-9]{10}$')])]
            }),
            dob: ['', [Validators.required]],
            gender: ['', [Validators.required]],
            maritalStatus: ['', Validators.required],
            fatherName: ['', Validators.compose([Validators.required, Validators.pattern('^[A-Za-z .\\-]+$')])],
            motherName: ['', Validators.compose([Validators.required, Validators.pattern('^[A-Za-z .\\-]+$')])],
        });

        this.basicForm.statusChanges.subscribe(data => this.onValueChanged(data));
        this.basicForm.controls['contact'].valueChanges.subscribe(data => this.onContactValueChanged(data));
        this.onValueChanged();
    }

    onValueChanged(data?: any) {
        if (!this.basicForm) {
            return;
        }
        const basicform = this.basicForm;
        const contactform = this.basicForm.controls['contact']
        if (basicform.pristine) {
            return;
        }
        if (!basicform.dirty) {
            return;
        }
        for (const field in this.formErrors) {
            // clear previous error message (if any)
            this.formErrors[field] = '';
            const control = basicform.controls[field];
            console.log(control + typeof control);
            if (!control.valid && control.touched) {
                console.log(control.errors);
                const messages = this.validationMessages[field];
                for (const key in control.errors) {
                    this.formErrors[field] += messages[key] + ' ';
                }
            }
        }

        for (const field in this.formErrorsContact) {
            // clear previous error message (if any)
            this.formErrorsContact[field] = '';
            const control = contactform.get(field);
            if (!control.valid && control.touched) {
                const messages = this.validationMessages[field];
                for (const key in control.errors) {
                    this.formErrorsContact[field] += messages[key] + ' ';
                }
            }
        }
    }

    onContactValueChanged(data?: any) {
        if (!this.basicForm.controls['contact']) {
            return;
        }
        const basicform = this.basicForm;
        if (basicform.pristine) {
            return;
        }
        if (!basicform.dirty) {
            return;
        }
        for (const field in this.formErrors) {
            // clear previous error message (if any)
            this.formErrors[field] = '';
            const control = basicform.controls[field];
            console.log(control + typeof control);
            if (!control.valid && control.touched) {
                console.log(control.errors);
                const messages = this.validationMessages[field];
                for (const key in control.errors) {
                    this.formErrors[field] += messages[key] + ' ';
                }
            }
        }
    }

    formErrors = {
        'pan': '',
        'panName': '',
        'dob': '',
        'gender': '',
        "maritalStatus": '',
        "fatherName": '',
        "motherName": ''
    };
    formErrorsContact = {
        'email': '',
        'mob': '',
        'tel': '',
        'fax': ''
    };

    onBasicSubmit() {
        let firstName = this.basicForm.controls['panName'].value.split(" ")[0]
        let lastName = this.basicForm.controls['panName'].value.split(" ")[1]
        this.basicsaved = true;
        console.log(this.basicForm.value)
        this.userService.updateBasicData(this.basicForm.value, firstName, lastName);
        // this.user.Basic = this.basicForm.value;
        // console.log(this.user);
        this.toggleBasic();
    }

    toggleBasic() {
        if (this.basiccollapsed == true) this.basiccollapsed = false;
        else this.basiccollapsed = true;

        this.state = (this.state === 'hide' ? 'show' : 'hide')
    }

}
