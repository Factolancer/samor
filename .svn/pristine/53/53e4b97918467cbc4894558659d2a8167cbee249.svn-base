import {Component, OnInit, ViewContainerRef, Inject} from "@angular/core";
import {Router, ActivatedRoute} from "@angular/router";
import {MdDialogRef, MdDialog} from "@angular/material";
import {FormBuilder, FormGroup, Validators, AbstractControl} from "@angular/forms";
import {EmailValidator} from "../validator";
import {HttpService} from "../services/http-service.service";
import {APP_CONFIG, IAppConfig} from "../../environments/environment";
import {Headers} from "@angular/http";


function passwordValidator(c: AbstractControl) {
    return c.get('confirm_password').value === c.get('enter_password').value
        ? null : {'mismatch': true};
}

@Component({
  selector: 'app-logintoinvest',
  templateUrl: './logintoinvest.component.html',
  styleUrls: ['./login.component.scss']
})

export class LoginToInvestComponent implements OnInit {
    result : any;
    public newUser = false;
    LoginForm: FormGroup;
    signUpForm: FormGroup;
    returnUrl: string;
    userData: any;
    name: String;
    email: String;
    errormessage: String = "";
    errormessage2: String = "";

    constructor(public router: Router, private route: ActivatedRoute, public http: HttpService,  public fb: FormBuilder,
                @Inject(APP_CONFIG) private config: IAppConfig) {}

    onLogIn(){
        this.userData = this.LoginForm.value
        console.log(this.userData);
        let cart = localStorage.getItem(this.config.localStoragePrefix+"cartId")
        if (cart==null){
            var cartId = ""
        }
        else {
            var cartId = localStorage.getItem(this.config.localStoragePrefix+"cartId")
        }
        let body = JSON.stringify({"username": this.userData.email, "password": this.userData.password})
        this.http.post('/user/login', {"username": this.userData.email, "password": this.userData.password, "cartId": cartId})
            .subscribe(
                response => {
                    console.log("User logged in successfully");
                    console.log(response);
                    localStorage.setItem(this.config.localStoragePrefix+'id_token', response.id_token);
                    this.router.navigate(['/dashboard']);
                },
                error => {
                    this.errormessage = "Username and Password don't match";
                    console.log("Error Occured! :( " + error.error);
                }

            )
    }

    onSignUp(){
        this.userData = this.signUpForm.value
        console.log(this.userData);
        let cart = localStorage.getItem(this.config.localStoragePrefix+"cartId")
        var cartId = ""
        if (cart!=null){
            cartId = localStorage.getItem(this.config.localStoragePrefix+"cartId")
        }
        let body = JSON.stringify({"username": this.userData.email, "email": this.userData.email, "password": this.userData.password.confirm_password, "mob": this.userData.mob})
        this.http.post('/user/login/signup', {"username": this.userData.email, "email": this.userData.email, "password": this.userData.password.confirm_password, "cartId": cartId})
            .subscribe(
                response => {
                    console.log("User created succesfully");
                    console.log(response);
                    localStorage.setItem(this.config.localStoragePrefix+'id_token', response.id_token);
                    this.router.navigate(['/dashboard'])
                },
                error => {
                    this.errormessage2 = "User already exists";
                    console.log("Error Occured! :( " + error.error);
                }

            )
    }

    /*signup(event, username, password) {
     event.preventDefault();
     let body = JSON.stringify({ username, password });
     this.http.post('10.1.0.101:3000/sessions/create', {'email':username,'password':password, 'username':username,  }/!*, { headers: contentHeaders }*!/)
     .subscribe(
     response => {
     //debugger;
     localStorage.setItem('id_token', response.json().id_token);
     // this.router.navigate(['/home']);
     this.dialogref.close(true);
     },
     error => {
     alert(error.text());
     console.log(error.text());
     }
     );
     }*/

    loginUser(){
        this.newUser = false;
    }

    checkmail(value: string){
        console.log(value);
        var authHeader = new Headers();
        authHeader.append("Authorization","Basic"); //+btoa("api:pubkey-b492fb4e9e8ad8f2ce0c2ae87e12272c"));
        authHeader.append('Content-Type', 'application/x-www-form-urlencoded');
        authHeader.append('Allow-Control-Allow-Origin', '*');
        var url = 'https://api.mailgun.net/v2/address/validate?address='+value;
        url = url + '&api_key=pubkey-b492fb4e9e8ad8f2ce0c2ae87e12272c'
        this.http.get(url)
            .subscribe(response => {
                    console.log(response.json().is_valid)
                }
            )

        // this.http.post('http://localhost:9000/checkmail', {"email": value})
        //     .subscribe(
        //         response => {
        //           console.log(response);
        //
        //         }
        //     );
    }

    ngOnInit() {
        // get return url from route parameters or default to '/'
        this.returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';

        this.LoginForm = this.fb.group({
            email: ['', Validators.compose([Validators.required, EmailValidator.isValidMailFormat])],
            password: ['', Validators.compose([Validators.required])]
        });

        this.signUpForm = this.fb.group({
            email: ['', Validators.compose([Validators.required, EmailValidator.isValidMailFormat])],
            /*mob: ['', Validators.compose([Validators.required, Validators.minLength(10), Validators.pattern('^[0-9]{10}$')])],*/
            password: this.fb.group({
                enter_password: ['', Validators.compose([Validators.required])],
                confirm_password: ['', Validators.compose([])]
            }, {validator: Validators.compose([passwordValidator])})
        })
    }
}
