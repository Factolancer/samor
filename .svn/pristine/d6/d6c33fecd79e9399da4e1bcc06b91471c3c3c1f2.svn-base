import {Component, OnInit, OnDestroy} from "@angular/core";
import {Subject} from "rxjs/Subject";
import {Observable} from "rxjs/Observable";
import {Subscription} from "rxjs/Subscription";
import "rxjs/add/observable/timer";
import "rxjs/add/operator/take";
import "rxjs/add/operator/distinctUntilChanged";
import "rxjs/add/operator/debounceTime";
import "rxjs/add/operator/switchMap";

import {Fund} from "../models/fund";
import {ExploreFundsService} from "../core/services/explore-funds.service";
import {Logger} from "../core/logger/logger";
import {FundSearchInput} from "./fund-search-input";
import {ExploreFundConstants} from "./explore-funds.constants";

@Component({
    selector: 'app-fund-search-bar',
    templateUrl: './fund-search-bar.component.html',
    styleUrls: ['./explore-funds.styles.scss']
})
export class FundSearchBarComponent implements OnInit, OnDestroy {


    searchSuggestions: Observable<Fund[]>;
    private searchTermStream = new Subject<string>();
    queryString: string = "";

    set _queryString(value: string) {
        this.logger.debug("FundSearchBarComponent", value);
    }

    searchInputSubscription: Subscription;
    searchInput: FundSearchInput;


    constructor(private exploreFundsService: ExploreFundsService, private logger: Logger) {
    }

    searchBarInput() {
        this.logger.debug(this.queryString);
        this.searchTermStream.next(this.queryString);
    }


    searchForKeyword(event: any) {
        this.logger.debug(event);
        let keywordObservable = Observable.timer(300).take(1).subscribe(_ => {
            this.logger.debug("got new value!", event, event.target);
            let defaultSearchInput = this.exploreFundsService.getDefaultFundSearchInput();
            defaultSearchInput.q = this.queryString;
            defaultSearchInput.r = this.searchInput.r;
            defaultSearchInput.qt = ExploreFundConstants.SEARCH_QUERY;
            this.exploreFundsService.navigateToExplore(defaultSearchInput);
            keywordObservable.unsubscribe();
        });


        /*if (event.keyCode == 13 || event.type == "click" || event.type == "select") {

         }*/
    }

    ngOnInit() {

        this.searchSuggestions = this.searchTermStream
            .debounceTime(300)
            .distinctUntilChanged()
            .switchMap((term: string) => this.exploreFundsService.getFundAutoCompleteData(term).map(res => {
                this.logger.debug(res)
                return res;
            }));

        this.searchInputSubscription = this.exploreFundsService.fundSearchInput.subscribe(
            (searchInput: FundSearchInput) => {
                this.queryString = searchInput.q;
                this.searchInput = searchInput;
            }
        )

    }

    ngOnDestroy() {
        this.searchTermStream.unsubscribe();
        this.searchInputSubscription.unsubscribe();
    }

}
