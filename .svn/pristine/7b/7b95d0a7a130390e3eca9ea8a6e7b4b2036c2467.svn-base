import {AbstractControl, AsyncValidatorFn, Validator} from "@angular/forms";
import {Observable} from "rxjs/Observable";
import {LoginService} from "../core/services/login.service";
import {Logger} from "../core/logger/logger";
import {Http, Headers, RequestOptions, Jsonp} from "@angular/http";
import {HttpService} from "../core/services/http-service.service";

export class ExistingUserValidator implements Validator{

    constructor(public loginService: LoginService){}

    validate( c : AbstractControl ) : /*Promise<{[key : string] : any}>|*/Observable<{[key : string] : any}> {
        return this.abc(c.value).debounceTime(500).distinctUntilChanged().first();
    }

     /*validateUserExistance(username: string) {
        return new Observable(observer => {
            this.loginService.doesUserExists(username)
                .subscribe(data => {
                    if (data['doesUserExists']){
                        observer.next({"userExists": true});
                    }
                    else {
                        observer.next(null);
                    }
                });
        });
    }*/

    static validateUserExistance(loginService: LoginService): AsyncValidatorFn{
        return (control: AbstractControl): Observable<any> => {
            return loginService.doesUserExists(control.value)
                .map(data => {
                    console.log("data " + data);
                    return ( data ? {'inValid': control.value} : null);
                })
        }
    }

     abc(control: AbstractControl): {[key: string]: any} {
         // let loginService: LoginService;
         // loginService = new LoginService(new Router, IAppConfig,Logger, HttpService, LocalStorageService, JwtHelper)
             return this.loginService.doesUserExists(control.value)
                 .subscribe(data => {
                     return data['doesUserExists'] ? {'userExists': true} : null;
                 })
    }
}

export class CustomAsyncValidator {
    constructor() {
    }

    static calcValueValid(logger: Logger, minValue: number): AsyncValidatorFn {
        return (control: AbstractControl): Observable<any> => {
            logger.debug("Calling calc valid function");
            const val = control.value;
            return Observable.of({'minValue': {'requiredValue': minValue, 'actualValue': val}});
        };
    }

}

export class MailgunAsyncValidator {

    static isEmailCorrect(http: HttpService): AsyncValidatorFn {
        return (control: AbstractControl): {[key: string]: any} => {
            const val = control.value; //typeof control.value.length > 0 ? control.value : 0;
            return http.post('/checkmail', {"email": val}).map(response => {
                    if (!response['is_valid']) {
                        return {"inValidMailFormat": control.value};
                    } else {
                        return null;
                    }
                },
                error => {
                    return null;
                }
            )

        };
    }
}
