import {
    Component, OnInit, animate, style, transition, trigger, state, OnDestroy,
    ViewContainerRef
} from "@angular/core";
import {SipReturnsQuestions} from "./questions";
import {CheckReturns} from "./goals";
import {CalculationKeys} from "./calculation-keys";
import {SipCalcGoal} from "./sip-calc-goal";
import {SipCalcQuestion} from "./sip-calc-question";
import {Router, ActivatedRoute} from "@angular/router";
import {Logger} from "../../core/logger/logger";
import {MdDialogConfig, MdDialog} from "@angular/material";
import {disclaimers} from "../../../properties/discalimers";
import {InfoDialogComponent} from "../../shared/info-dialog.component";

@Component({
    selector: 'app-returns-based',
    templateUrl: './returns-based.component.html',
    styleUrls: ['./sip-calc.styles.scss']
})

export class ReturnsBasedComponent implements OnInit, OnDestroy {
    chart: any;
    orientation: string;
    selectedIndex: number = 0;
    questions: SipCalcQuestion[];
    goal: SipCalcGoal;
    principal: number = 0;
    years: number = 0;
    amount: number = 0;
    inflation: number = 0;
    rate: number = 0;
    xCategories: any[] = [];
    SIPAmtData: any[] = [];
    investedAmtData: any[] = [];
    floor: number;
    ceiling: number;
    considerInflation: boolean;
    showReCalculateButton: boolean;
    investedAmount: number;
    trySimulation: boolean;

    constructor(private router: Router, private route: ActivatedRoute, private logger: Logger,
                private viewContainerRef: ViewContainerRef, private dialog: MdDialog) {
    }

    next() {
        this.orientation = 'next';
        if (this.selectedIndex == 0) {
            this.selectedIndex = 2;
        } else {
            this.calculate();
        }
    }

    prev() {
        this.orientation = 'prev';
        this.selectedIndex = 0;
    }


    inflationAdjustment(value: any) {
        this.considerInflation = value;
        this.calculate();

        this.chart.series[0].setData(this.SIPAmtData);
        this.chart.series[1].setData(this.investedAmtData);
    }

    recalculate(value: any) {
        if (value && value > 0) {
            this.calculate();
        }
        this.chart.series[0].setData(this.SIPAmtData);
        this.chart.series[1].setData(this.investedAmtData);
    }

    saveChartInstance(chartInstance: any) {
        this.logger.debug(chartInstance);
        this.chart = chartInstance;
    }

    calculate() {
        this.showReCalculateButton = false;
        this.questions.forEach(question => {
            switch (question.calculationKey) {
                case CalculationKeys.inflation:
                    this.inflation = question.answer;
                    break;
                case CalculationKeys.principal:
                    this.principal = question.answer;
                    break;
                case CalculationKeys.rate:
                    this.rate = question.answer;
                    break;
                case CalculationKeys.years:
                    this.years = question.answer;
                    break;
                default:
                    break;
            }
        });

        //calculations for all other goals
        let applicableRate;
        if (this.considerInflation) {
            applicableRate = (this.rate - this.inflation) / 100;
        } else {
            applicableRate = this.rate / 100;
        }


        if (this.trySimulation) {

        }
        /*
         //inflation adjusted amount
         applicableRate = (rate - inflation) / 100;
         compoundingFrequency = how many times is it compounding in one year.
         calculationFactor = (1+applicableRate/100)^(1/compoundingFrequency)
         months = years*12
         numerator  = [calculationFactor -1]
         denom = [calculationFactor^n-1] * [calculationFactor]
         P = adjustedAmount * numerator / denominator ;

         */
        let months: number = this.years * 12;
        let compoundFrequency: number = 12;
        let calculationFactor: number = (1 + applicableRate) ** (1 / compoundFrequency);
        let denom: number = calculationFactor - 1;
        let numerator: number = (calculationFactor ** months - 1) * calculationFactor;
        let amount: number = this.principal * numerator / denom;
        this.investedAmount = this.principal * months;
        //this.logger.debug("adjustedAmount:" + adjustedAmount);
        /*this.logger.debug("applicableRate:" + applicableRate);
         this.logger.debug("months:" + months);
         this.logger.debug("calculationFactor:" + calculationFactor);
         this.logger.debug("numerator:" + numerator);
         this.logger.debug("denom:" + denom);
         this.logger.debug("amount:" + amount);*/
        //calculation for graph
        let graphSIPAmount: number = 0;
        let graphInvestedAmount: number = 0;

        this.SIPAmtData = [];
        this.investedAmtData = [];

        for (let graphTime = 1; graphTime <= this.years * 12; graphTime++) {
            let numerator: number = (calculationFactor ** graphTime - 1) * calculationFactor;
            graphSIPAmount = this.principal * numerator / denom;
            graphInvestedAmount += this.principal;
            if (graphTime % 12 == 0) {
                this.SIPAmtData.push([graphTime / 12, Math.ceil(graphSIPAmount)]);
                this.investedAmtData.push([graphTime / 12, Math.ceil(graphInvestedAmount)]);

            }
        }
        this.amount = Math.ceil(amount);
        this.floor = Math.min(Math.min.apply(Math, this.SIPAmtData), Math.min.apply(Math, this.investedAmtData));
        this.ceiling = Math.max(Math.max.apply(Math, this.SIPAmtData), Math.max.apply(Math, this.investedAmtData));

        this.options.xAxis.categories = this.xCategories;
        this.options.series[0].data = this.SIPAmtData;
        this.options.series[1].data = this.investedAmtData;
        //this.chart.parent.series[0].data = this.SIPAmtData;
        //this.chart.parent.series[1].data = this.investedAmtData;
        //this.chart.hcEvents.redraw()

    }

    options: any;

    ngOnInit() {
        this.questions = SipReturnsQuestions;
        this.goal = CheckReturns;
        this.considerInflation = true;
        this.showReCalculateButton = false;
        let xToolTip = this.goal.xToolTip;
        let yToolTip = this.goal.yToolTip;

        this.options = {
            title: {text: ''},
            credits: {enabled: false},
            exporting:{enabled:false},
            chart: {
                width: 600,
                height: 230
            },
            plotOptions: {
                line: {
                    dataLabels: {
                        enabled: false
                    }
                }
            },
            xAxis: {
                categories: [],
                title: {
                    text: 'Time(in yrs)',
                    style: {'fontSize': '11px'}
                }
            },
            colors: ["#77ba78", "#BF3235", "black"],
            yAxis: {
                min: this.floor,
                max: this.ceiling,
                title: {
                    text: 'Amount(in INR.)',
                    style: {'fontSize': '11px'}
                },
                labels: {
                    formatter: function () {
                        var val = this.value;
                        if (val >= 10000000) val = (val / 10000000).toFixed(1) + 'Cr';
                        else if (val >= 100000) val = (val / 100000).toFixed(1) + 'Lac';
                        else if (val >= 1000) val = (val / 1000).toFixed(1) + 'k';
                        return val;
                    }
                }
            },
            tooltip: {
                formatter: function () {
                    var valy = this.point.y;
                    if (valy >= 10000000) valy = (valy / 10000000).toFixed(2) + 'Cr';
                    else if (valy >= 100000) valy = (valy / 100000).toFixed(2) + 'Lac';
                    else if (valy >= 1000) valy = (valy / 1000).toFixed(2) + 'k';
                    var valx = this.point.x;
                    return xToolTip +' <b>'+ valx + '</b> ' + yToolTip + ' ' + this.series.name + ' is INR '+' <b>'+ valy+'</b>';
                    //return val;
                }
            },
            legend: {
                align: 'top',
                verticalAlign: 'top',
                layout: 'horizontal',
                x: 100
            },
            series: [{
                name: 'SIP Value',
                data: []
            }, {
                name: 'Invested Amount',
                data: []
            }]
        };


    }

    ngOnDestroy() {

    }

    seeDisclaimers() {
        let config = new MdDialogConfig();
        config.width = "60vw";
        config.height = "80vh";
        config.viewContainerRef = this.viewContainerRef;

        let infoDialogConfig = {
            infoTitle: "Disclaimers",
            infoText: [`${disclaimers.calculator_1}`, `${disclaimers.calculator_2}`, `${disclaimers.calculator_3}`, `${disclaimers.calculator_4}`]
        }

        let dialogRef = this.dialog.open(InfoDialogComponent, config);
        dialogRef.componentInstance.config = infoDialogConfig;
    }

}