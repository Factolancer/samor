import {Injectable, Optional, Inject} from "@angular/core";
import {HttpService} from "./http-service.service";
import {Fund} from "../models/fund";
import {Router} from "@angular/router";
import {IAppConfig, APP_CONFIG} from "../../environments/environment";
import {LocalStorageService} from "angular-2-local-storage";
import {LoginService} from "./login.service";
import {Logger} from "../shared/logger/logger";
import {isNullOrUndefined} from "util";
import {Observable, Subject} from "rxjs";
import {Cart} from "../models/cart";

@Injectable()
export class CartService {

    cartSubject: Subject<Cart>;
    cartObservable: Observable<Cart>;
    private cart: Cart;

    constructor(private httpService: HttpService, public  router: Router, private loginService: LoginService,
                @Inject(APP_CONFIG) private config: IAppConfig, private localStorageService: LocalStorageService,
                @Optional() public funds: Fund[], private logger: Logger) {
        this.cartSubject = new Subject<Cart>();
        this.cartObservable = this.cartSubject.asObservable();
        this.cart = new Cart();

    }

    addFundToCart(funds: Fund[]): Observable<any> {

        let cart = this.cart;
        if (this.checkIfFundExists(funds)) {
            return Observable.of({message: "Fund already exists in cart!"});
        } else {
            cart.funds.push(funds[0]);
            return this.httpService.post("/checkout/saveCart", cart).map(
                response => {
                    this.setCartToken(response.cartId);
                    this.cartSubject.next(cart);
                    return {message: "Fund successfully added to cart!"}
                    //return response;
                })
        }

    }

    updateCartData(funds: Fund[]) {
        return this.httpService.post("/checkout/updateCart", {"funds": funds});
    }

    // addFundsToCart(fundIds: string[], investmentMode: string) {
    //     return this.httpService.post("/fund/addFundsToCart", {"fundIdList": fundIds, "investmentMode": investmentMode});
    // }

    removeFundFromCart(fundsList: Fund[]) {
        return this.httpService.post("/checkout/removeFund", {"funds": fundsList});
    }

    getCartData() {
        return this.httpService.post("/checkout/getCartData", {"cartId": this.getCartToken()});
    }

    addFundsToCart(funds: Fund[]) {
        let cart = this.cart;
        funds.forEach(fund => {
            cart.funds = cart.funds.filter(existingFund => {
                if (existingFund.id != fund.id && fund.investmentMode != existingFund.investmentMode){
                    return true;
                } else {
                    return false;
                }
            });
        });

        funds.forEach(fund => {
            cart.funds.push(fund);
        });

        this.httpService.post("/checkout/saveCart", cart)
            .subscribe(
                response => {
                    console.log(response);
                    this.setCartToken(response.cartId);
                    this.setCartSubjectState(cart);
                    this.router.navigate(['/cart']);
                }
            )
    }

    mergeCart() {
        if (this.isCartPresent()) {
            this.httpService.post("/checkout/mergeCart", {"cartId": this.getCartToken()}).subscribe(res => {
                let cart = res as Cart;
                this.setCartSubjectState(cart);
            });
        } else {
            this.httpService.post("/checkout/mergeCart", {"cartId": ""}).subscribe(res => {
                let cart = res as Cart;
                this.setCartSubjectState(cart);
            });
        }
    }

    resetCart() {
        this.setCartSubjectState(new Cart());
        this.localStorageService.remove(this.config.cartToken);
    }


    isCartPresent() {
        let cartId = this.getCartToken();
        if (isNullOrUndefined(cartId)) {
            return false;
        } else {
            return true;
        }
    }

    getCartToken() {
        return this.localStorageService.get(this.config.cartToken);
    }

    setCartToken(cartId: string) {
        if (cartId) {
            this.localStorageService.set(this.config.cartToken, cartId);
        }
    }

    setCartSubjectState(cart: Cart) {
        this.cart = cart;
        this.setCartToken(cart.id);
        this.logger.debug("CartService", cart);
        this.cartSubject.next(cart);
    }

    checkIfFundExists(funds: Fund[]): boolean {
        let isFound = false;
        funds.forEach(fund => {
            this.cart.funds.forEach(existingFund => {
                if (existingFund.id == fund.id && existingFund.investmentMode == fund.investmentMode) {
                    isFound = true;
                }
            });
        });
        return isFound
    }

    getCart() {
        return this.cart;
    }

}
