import {Component, OnInit, Input} from '@angular/core';
import {EquityAdvancedFactsheet} from "../equity-advanced-factsheet";

@Component({
    selector: 'app-equity-view',
    templateUrl: './equity-view.component.html',
    styleUrls: ['../factsheet.styles.scss']
})
export class EquityViewComponent implements OnInit {

    sinceInceptionColumnGraphData: any;
    annualReturnsColumnGraphData: any;
    assetAllocationDonutData: any;
    sipPerformanceLineChartDataMonthly: any;
    sipPerformanceColumnChartDataYearly: any;
    sipPerformanceAmountInvested: number[] = [];
    sipPerformanceFund: number[] = [];
    sipPerformanceBenchmark: number[] = [];
    sipAmount = 1000;
    heatMapPivot = 2;
    selectedTab = 0;

    @Input() set _advancedFactsheet(value: any) {
        this.advancedFactsheet = value;

        this.sinceInceptionColumnGraphData = [["Years", "Fund", "Benchmark"]];
        for (let index = 0; index < this.advancedFactsheet.sinceInceptionCmp.dataPoints.length; index++) {
            this.sinceInceptionColumnGraphData.push([this.advancedFactsheet.sinceInceptionCmp.dataPoints[index],
                +this.advancedFactsheet.sinceInceptionCmp.fundPerformance[index],
                +this.advancedFactsheet.sinceInceptionCmp.benchmarkPerformance[index]]);
        }

        this.annualReturnsColumnGraphData = [["Year", "Fund", "Benchmark"]];
        for (let index = 0; index < this.advancedFactsheet.annualReturns.dataPoints.length; index++) {
            this.annualReturnsColumnGraphData.push([this.advancedFactsheet.annualReturns.dataPoints[index],
                +this.advancedFactsheet.annualReturns.fundPerformance[index],
                +this.advancedFactsheet.annualReturns.benchmarkPerformance[index]]);
        }


        this.assetAllocationDonutData = [["Assets", "Allocation"]];
        for (let key in this.advancedFactsheet.assetAllocation.dataMap) {
            this.assetAllocationDonutData .push([key, +this.advancedFactsheet.assetAllocation.dataMap[key]]);
        }

        this.sipPerformanceColumnChartDataYearly = [["Year", "Amount Invested", "Benchmark", "Fund"]];
        for (let index = 0; index < this.advancedFactsheet.sipPerformance.dataPoints.length; index++) {
            this.sipPerformanceAmountInvested.push(12 * this.sipAmount * +this.advancedFactsheet.sipPerformance.dataPoints[index]);
            this.sipPerformanceFund.push(
                this.calculateSipPerformanceValues(
                    +this.advancedFactsheet.sipPerformance.dataPoints[index],
                    +this.advancedFactsheet.sipPerformance.fundPerformance[index])
            );

            this.sipPerformanceBenchmark.push(
                this.calculateSipPerformanceValues(
                    +this.advancedFactsheet.sipPerformance.dataPoints[index],
                    +this.advancedFactsheet.sipPerformance.benchmarkPerformance[index])
            );

            this.sipPerformanceColumnChartDataYearly.push(
                [
                    this.advancedFactsheet.sipPerformance.dataPoints[index] + " years",
                    +this.sipPerformanceAmountInvested[index],
                    +this.sipPerformanceBenchmark[index],
                    +this.sipPerformanceFund[index],
                ])
        }


        this.sipPerformanceLineChartDataMonthly = [["Year", "Amount", "Investment"]];
        for (let index = 1; index < 6; index++) {
            this.sipPerformanceLineChartDataMonthly.push(
                [
                    index + " years",
                    12 * this.sipAmount * index,
                    this.calculateSipPerformanceValues(index, +this.advancedFactsheet.sipPerformance.fundPerformance[2])
                ])
        }
    }

    public sinceInceptionColumnChartOptions = {
        hAxis: {
            title: 'Years',
            minValue: 0,
            textStyle: {
                bold: true,
                fontSize: 12,
                color: '#4d4d4d'
            },
            titleTextStyle: {
                bold: true,
                fontSize: 18,
                color: '#4d4d4d'
            }
        },
        vAxis: {
            title: 'Return(in %)',
            textStyle: {
                fontSize: 14,
                bold: true,
                color: '#848484'
            },
            titleTextStyle: {
                fontSize: 14,
                bold: true,
                color: '#848484'
            }
        },
        legend: {
            position: 'top',
            alignment: 'end'
        }
    };

    public annualReturnsColumnChartOptions = {
        hAxis: {
            title: 'Year',
            minValue: 0,
            textStyle: {
                bold: true,
                fontSize: 12,
                color: '#4d4d4d'
            },
            titleTextStyle: {
                bold: true,
                fontSize: 18,
                color: '#4d4d4d'
            }
        },
        vAxis: {
            title: 'Return(in %)',
            textStyle: {
                fontSize: 14,
                bold: true,
                color: '#848484'
            },
            titleTextStyle: {
                fontSize: 14,
                bold: true,
                color: '#848484'
            }
        },
        legend: {
            position: 'top',
            alignment: 'end'
        }
    };

    public assetAllocationDonutChartOptions = {
        pieHole: 0.6,
    };

    public sipPerformanceYearlyColumnChartOptions = {
        hAxis: {
            minValue: 0,
            textStyle: {
                bold: true,
                fontSize: 12,
                color: '#4d4d4d'
            },
            titleTextStyle: {
                bold: true,
                fontSize: 18,
                color: '#4d4d4d'
            }
        }
        ,
        vAxis: {
            textStyle: {
                fontSize: 14,
                bold: true,
                color: '#848484'
            },
            titleTextStyle: {
                fontSize: 14,
                bold: true,
                color: '#848484'
            }
        }
        ,
        legend: {
            position: 'bottom'
        }
    };

    public sipPerformanceMonthlyLineChartOptions = {
        curveType: 'function',
        pointSize: 3,
        legend: {position: 'bottom'},
        series: {
            0: {
                annotations: {
                    stemLength: 3,
                    stemColor: 'white',
                    position: 'down'
                }
            },
            1: {
                annotations: {
                    stemLength: 5,
                    stemColor: 'white'
                }
            }

            // textStyle: {fontSize: 12, color: 'green' }
        }
    }

    advancedFactsheet: EquityAdvancedFactsheet;


    calculateSipPerformanceValues(years: number, rate: number): number {
        let months: number = years * 12;
        let compoundFrequency: number = 12;
        let calculationFactor: number = (1 + rate / 100) ** (1 / compoundFrequency);
        let denom: number = calculationFactor - 1;
        let numerator: number = (calculationFactor ** months - 1) * calculationFactor;
        let amount: number = this.sipAmount * numerator / denom;

        /* console.log("years:" + years);
         console.log("rate:" + rate);
         console.log("months:" + months);
         console.log("calculation factor:" + calculationFactor);
         console.log("denom:" + denom);
         console.log("num:" + numerator);
         console.log("amount:" + amount);
         console.log("sipAmount:" + this.sipAmount);*/

        return amount;
    }

    constructor() {
    }

    ngOnInit() {
    }

}
